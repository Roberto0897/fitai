# apps/chatbot/services/chat_service.py
# VERS√ÉO COMPLETA COM FLUXO DE GERA√á√ÉO DE TREINO
import json
import time
import re
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from django.conf import settings
from django.core.cache import cache
from django.utils import timezone
from django.contrib.auth.models import User

from ..models import Conversation, Message, ChatContext
from apps.users.models import UserProfile
from apps.workouts.models import Workout, WorkoutSession
from apps.recommendations.services.ai_service import AIService
import traceback

logger = logging.getLogger(__name__)


# ============================================================
# üî• CLASSE DE FLUXO DE GERA√á√ÉO DE TREINO
# ============================================================

class WorkoutGenerationFlow:
    """
    Gerencia o fluxo conversacional para gera√ß√£o de treinos personalizados
    """
    
    # Estados do fluxo
    STATE_INITIAL = 'initial'
    STATE_WAITING_FOCUS = 'waiting_focus'
    STATE_WAITING_DAYS = 'waiting_days'
    STATE_WAITING_DIFFICULTY = 'waiting_difficulty'
    STATE_WAITING_CONFIRMATION = 'waiting_confirmation'
    STATE_GENERATING = 'generating'
    STATE_COMPLETED = 'completed'
    
    # Op√ß√µes de foco
    FOCUS_OPTIONS = {
        'completo': {
            'value': 'full_body',
            'label': 'üí™ Treino Completo',
            'description': 'Trabalha todos os grupos musculares',
            'emoji': 'üèãÔ∏è'
        },
        'superior': {
            'value': 'upper',
            'label': 'üí™ Parte Superior',
            'description': 'Peito, costas, ombros e bra√ßos',
            'emoji': 'üí™'
        },
        'inferior': {
            'value': 'lower',
            'label': 'ü¶µ Parte Inferior',
            'description': 'Pernas, gl√∫teos e panturrilhas',
            'emoji': 'ü¶µ'
        },
        'peito': {
            'value': 'chest',
            'label': 'ü´Ä Peito',
            'description': 'Foco em peitoral e tr√≠ceps',
            'emoji': 'ü´Ä'
        },
        'costas': {
            'value': 'back',
            'label': 'üîô Costas',
            'description': 'Foco em dorsais e b√≠ceps',
            'emoji': 'üîô'
        },
        'pernas': {
            'value': 'legs',
            'label': 'ü¶µ Pernas',
            'description': 'Quadr√≠ceps, posteriores e gl√∫teos',
            'emoji': 'ü¶µ'
        },
        'bracos': {
            'value': 'arms',
            'label': 'üí™ Bra√ßos',
            'description': 'B√≠ceps e tr√≠ceps',
            'emoji': 'üí™'
        },
        'ombros': {
            'value': 'shoulders',
            'label': 'üèîÔ∏è Ombros',
            'description': 'Deltoides e trap√©zio',
            'emoji': 'üèîÔ∏è'
        },
        'cardio': {
            'value': 'cardio',
            'label': 'üèÉ Cardio',
            'description': 'Resist√™ncia e queima de calorias',
            'emoji': 'üèÉ'
        }
    }
    
    # Op√ß√µes de dias
    DAYS_OPTIONS = {
        '3': {'value': 3, 'label': '3 dias/semana', 'description': 'Ideal para iniciantes'},
        '4': {'value': 4, 'label': '4 dias/semana', 'description': 'Bom equil√≠brio'},
        '5': {'value': 5, 'label': '5 dias/semana', 'description': 'Rotina intensa'},
        '6': {'value': 6, 'label': '6 dias/semana', 'description': 'Muito avan√ßado'},
    }
    
    # Op√ß√µes de dificuldade
    DIFFICULTY_OPTIONS = {
        'iniciante': {'value': 'beginner', 'label': 'üå± Iniciante', 'description': 'Come√ßando agora'},
        'intermediario': {'value': 'intermediate', 'label': 'üí™ Intermedi√°rio', 'description': 'J√° treino regularmente'},
        'avancado': {'value': 'advanced', 'label': 'üî• Avan√ßado', 'description': 'Atleta experiente'},
    }
    
    
    @staticmethod
    def detect_workout_intent(message: str) -> bool:
        """Detecta se o usu√°rio quer gerar um treino"""
        keywords = [
            'gerar treino', 'criar treino', 'montar treino',
            'quero treinar', 'treino personalizado', 'plano de treino',
            'monta um treino', 'cria um treino', 'preciso de treino',
            'workout', 'plano semanal', 'rotina de treino',
            'me ajuda com treino', 'treino para mim',
            'quero um treino', 'fazer treino', 'come√ßar treinar',
            
            # üî• ADICIONAR:
            'detalhes do treino', 'outros dias', 'completar treino',
            'resto do treino', 'continuar treino', 'demais dias'
        ]

        message_lower = message.lower()
        return any(keyword in message_lower for keyword in keywords)

    @staticmethod
    def detect_focus_intent(message: str) -> dict:
        """
        Detecta quais focos o usu√°rio escolheu
        RETORNA: {'single': 'peito'} OU {'multiple': ['peito', 'ombros', 'bracos']}
        """
        message_lower = message.lower().strip()
        
        message_clean = re.sub(r'[^\w\s]', '', message_lower)
        
        focus_keywords = {
            'completo': ['completo', 'full body', 'corpo todo', 'geral', '1'],
            'superior': ['superior', 'upper', 'parte de cima', '2'],
            'inferior': ['inferior', 'lower', 'parte de baixo', '3'],
            'peito': ['peito', 'peitoral', 'chest', 'peit', '4'],
            'costas': ['costas', 'costa', 'dorsal', 'back', '5'],
            'pernas': ['perna', 'pernas', 'leg', 'legs', 'coxa', '6'],
            'bracos': ['bra√ßo', 'bracos', 'braco', 'arm', 'biceps', 'triceps', '7'],
            'ombros': ['ombro', 'ombros', 'shoulder', 'deltoide', '8'],
            'cardio': ['cardio', 'aerobico', 'corrida', '9'],
        }
        
        # üî• DETECTAR TODOS OS GRUPOS MENCIONADOS
        detected_groups = []
        for focus, keywords in focus_keywords.items():
            if any(keyword in message_clean for keyword in keywords):
                detected_groups.append(focus)
        
        # Se n√£o detectou nada, tentar n√∫meros
        if not detected_groups:
            numbers = re.findall(r'\d+', message)
            if numbers:
                focus_map = {1: 'completo', 2: 'superior', 3: 'inferior', 
                           4: 'peito', 5: 'costas', 6: 'pernas', 
                           7: 'bracos', 8: 'ombros', 9: 'cardio'}
                for num in numbers:
                    if int(num) in focus_map:
                        detected_groups.append(focus_map[int(num)])
        
        # Retornar estrutura adequada
        if len(detected_groups) == 0:
            return None
        elif len(detected_groups) == 1:
            return {'type': 'single', 'focus': detected_groups[0]}
        else:
            return {'type': 'multiple', 'groups': detected_groups}
        
    @staticmethod
    def detect_days_intent(message: str) -> int:
        """Detecta quantos dias o usu√°rio escolheu"""
        message_lower = message.lower().strip()
        numbers = re.findall(r'\d+', message_lower)
        if numbers:
            days = int(numbers[0])
            if 3 <= days <= 6:
                return days
        
        # Detectar por extenso
        day_words = {
            'tr√™s': 3, 'tres': 3, '3': 3,
            'quatro': 4, '4': 4,
            'cinco': 5, '5': 5,
            'seis': 6, '6': 6
        }
        
        for word, value in day_words.items():
            if word in message_lower:
                return value
        
        return None
    
    @staticmethod
    def get_days_prompt(focus_data) -> dict:
        """Adapta prompt baseado em single ou multiple"""
        
        # Se recebeu string diretamente (compatibilidade)
        if isinstance(focus_data, str):
            message = f"‚úÖ Foco escolhido: **{focus_data}**\n\n"
        
        # Se recebeu dict
        elif isinstance(focus_data, dict):
            if focus_data['type'] == 'single':
                focus_label = WorkoutGenerationFlow.FOCUS_OPTIONS[focus_data['focus']]['label']
                message = f"‚úÖ Foco escolhido: **{focus_label}**\n\n"
            else:
                # M√∫ltiplos grupos
                groups = focus_data['groups']
                labels = [WorkoutGenerationFlow.FOCUS_OPTIONS[g]['label'] for g in groups]
                message = f"‚úÖ Focos escolhidos: **{', '.join(labels)}**\n\n"
        else:
            message = "‚úÖ Foco selecionado!\n\n"
        
        message += "**Quantos dias por semana voc√™ pode treinar?**"
        
        return {
            'message': message,
            'options': [
                {'id': '3', 'label': '3 dias/semana', 'description': 'Ideal para iniciantes'},
                {'id': '4', 'label': '4 dias/semana', 'description': 'Bom equil√≠brio'},
                {'id': '5', 'label': '5 dias/semana', 'description': 'Rotina intensa'},
                {'id': '6', 'label': '6 dias/semana', 'description': 'Muito avan√ßado'},
            ],
            'next_state': WorkoutGenerationFlow.STATE_WAITING_DAYS
        }

    @staticmethod
    def detect_difficulty_intent(message: str) -> str:
        """Detecta dificuldade - MELHORADO"""
        message_lower = message.lower().strip()
        
        import re
        message_clean = re.sub(r'[^\w\s]', '', message_lower)
        
        difficulty_keywords = {
            'iniciante': ['iniciante', 'beginner', 'come√ßo', 'come√ßando', 'comeco', 'novo', 
                        'primeira vez', '1', 'opcao 1', 'op√ß√£o 1'],
            'intermediario': ['intermedi√°rio', 'intermediario', 'intermediate', 'm√©dio', 
                            'medio', 'regular', '2', 'opcao 2', 'op√ß√£o 2'],
            'avancado': ['avan√ßado', 'avancado', 'advanced', 'experiente', 'atleta', 
                        'pro', 'profissional', '3', 'opcao 3', 'op√ß√£o 3'],
        }
        
        for difficulty, keywords in difficulty_keywords.items():
            if any(keyword in message_clean for keyword in keywords):
                return difficulty
        
        # Tentar n√∫mero
        numbers = re.findall(r'\d+', message)
        if numbers:
            num = int(numbers[0])
            diff_map = {1: 'iniciante', 2: 'intermediario', 3: 'avancado'}
            return diff_map.get(num)
        
        return None
    
    @staticmethod
    def get_difficulty_prompt(days: int) -> dict:
        """Pergunta sobre dificuldade"""
        return {
            'message': f"‚úÖ Frequ√™ncia: **{days} dias/semana**\n\n"
                    f"**Qual √© o seu n√≠vel de experi√™ncia?**",
            'options': [
                {'id': '1', 'label': 'üå± Iniciante', 'description': 'Come√ßando agora'},
                {'id': '2', 'label': 'üí™ Intermedi√°rio', 'description': 'J√° treino regularmente'},
                {'id': '3', 'label': 'üî• Avan√ßado', 'description': 'Atleta experiente'},
            ],
            'next_state': WorkoutGenerationFlow.STATE_WAITING_DIFFICULTY
        }

    @staticmethod
    def get_initial_prompt(user_name: str = 'Atleta') -> dict:
        """Mensagem inicial quando detecta inten√ß√£o de gerar treino"""
        return {
            'message': f"üèãÔ∏è √ìtimo, {user_name}! Vamos criar seu treino personalizado!\n\n"
                      f"**Primeiro, qual √© o seu foco principal?**\n\n"
                      f"Responda com o n√∫mero ou nome da op√ß√£o:",
            'options': [
                {'id': '1', 'label': 'üí™ Treino Completo', 'description': 'Corpo todo'},
                {'id': '2', 'label': 'üîù Parte Superior', 'description': 'Peito, costas, ombros, bra√ßos'},
                {'id': '3', 'label': 'ü¶µ Parte Inferior', 'description': 'Pernas e gl√∫teos'},
                {'id': '4', 'label': 'ü´Ä Peito', 'description': 'Foco em peitoral'},
                {'id': '5', 'label': 'üîô Costas', 'description': 'Foco em dorsais'},
                {'id': '6', 'label': 'ü¶µ Pernas', 'description': 'Quadr√≠ceps e posteriores'},
                {'id': '7', 'label': 'üí™ Bra√ßos', 'description': 'B√≠ceps e tr√≠ceps'},
                {'id': '8', 'label': 'üèîÔ∏è Ombros', 'description': 'Deltoides'},
                {'id': '9', 'label': 'üèÉ Cardio', 'description': 'Resist√™ncia'},
            ],
            'next_state': WorkoutGenerationFlow.STATE_WAITING_FOCUS
        }
    

    @staticmethod
    def get_confirmation_prompt(focus_label: str, days: int, difficulty_label: str) -> dict:
        return {
            'message': f"üéØ **Resumo do seu treino:**\n\n"
                      f"‚Ä¢ Foco: {focus_label}\n"
                      f"‚Ä¢ Frequ√™ncia: {days} dias/semana\n"
                      f"‚Ä¢ N√≠vel: {difficulty_label}\n\n"
                      f"**Tudo certo?** Digite 'sim' para gerar ou 'cancelar'.",
            'options': [
                {'id': 'sim', 'label': '‚úÖ Sim, gerar treino!'},
                {'id': 'cancelar', 'label': '‚ùå Cancelar'},
            ],
            'next_state': WorkoutGenerationFlow.STATE_WAITING_CONFIRMATION
        }

# apps/chatbot/services/chat_service.py

class WorkoutPlanExtractor:
    """
    üî• VERS√ÉO MELHORADA - Detecta planos em QUALQUER formato
    """
    
    @staticmethod
    def extract_plan_info(ai_response_content: str) -> Optional[Dict]:
        """
        Analisa a resposta da IA e extrai treinos
        """
        try:
            content_lower = ai_response_content.lower()
            
            # üî• 1. DETECTAR SE √â UM PLANO (MAIS FLEX√çVEL)
            plan_indicators = [
                'treino de',
                'treino para',
                'sugest√£o de treino',
                'plano',
                'dia 1', 'dia 2', 'dia 3',
                'segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta',
                '**dia',  # ‚Üê ADICIONAR formato Markdown
                's√©ries',
                'repeti√ß√µes',
                'reps',
                'supino', 'agachamento', 'flex√£o', 'remada',
            ]
            
            # üî• REDUZIR para 3 indicadores
            indicator_count = sum(1 for indicator in plan_indicators 
                                 if indicator in content_lower)
            
            logger.info(f"üìä Indicadores encontrados: {indicator_count}")
            
            if indicator_count < 3:
                logger.info("‚ö†Ô∏è Resposta n√£o cont√©m plano de treino")
                return None
            
            logger.info("‚úÖ Plano de treino detectado")
            
            # üî• 2. EXTRAIR DIAS
            days_per_week = WorkoutPlanExtractor._extract_days(ai_response_content)
            
            # üî• 3. EXTRAIR FOCO
            focus = WorkoutPlanExtractor._extract_focus(ai_response_content)
            
            # üî• 4. EXTRAIR DIFICULDADE
            difficulty = WorkoutPlanExtractor._extract_difficulty(ai_response_content)
            
            # üî• 5. EXTRAIR EXERC√çCIOS POR DIA (MELHORADO)
            exercises_by_day = WorkoutPlanExtractor._extract_exercises_by_day_improved(
                ai_response_content
            )
            
            if not exercises_by_day or len(exercises_by_day) == 0:
                logger.warning("‚ö†Ô∏è Nenhum exerc√≠cio extra√≠do")
                return None
            
            logger.info(f"üìä Plano extra√≠do:")
            logger.info(f"   Dias: {days_per_week}")
            logger.info(f"   Foco: {focus}")
            logger.info(f"   Dificuldade: {difficulty}")
            logger.info(f"   Dias com exerc√≠cios: {len(exercises_by_day)}")
            
            return {
                'days_per_week': days_per_week,
                'focus': focus,
                'difficulty': difficulty,
                'exercises_by_day': exercises_by_day,
                'extracted_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair plano: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    @staticmethod
    def _extract_days(content: str) -> int:
        """Extrai quantos dias - MELHORADO"""
        content_lower = content.lower()
        
        # Procurar "X dias"
        pattern = r'(\d+)\s*dias?'
        match = re.search(pattern, content_lower)
        
        if match:
            days = int(match.group(1))
            if 1 <= days <= 7:
                return days
        
        # Contar quantos "Dia X:" ou "**Dia X:**"
        day_pattern = r'\*?\*?dia\s*(\d+)'
        day_matches = re.findall(day_pattern, content_lower)
        
        if day_matches:
            max_day = max([int(d) for d in day_matches])
            logger.info(f"   Detectou {max_day} dias pelo padr√£o 'Dia X'")
            return max_day
        
        # Contar dias da semana
        days_count = sum(1 for day in ['segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 's√°bado', 'domingo']
                        if day in content_lower)
        
        if days_count > 0:
            return days_count
        
        return 3  # Default
    
    @staticmethod
    def _extract_focus(content: str) -> str:
        """Extrai foco - IGUAL"""
        focus_map = {
            'corpo completo': 'full_body',
            'full body': 'full_body',
            'corpo todo': 'full_body',
            'parte superior': 'upper',
            'upper': 'upper',
            'membros superiores': 'upper',
            'parte inferior': 'lower',
            'lower': 'lower',
            'membros inferiores': 'lower',
            'peito': 'chest',
            'peitoral': 'chest',
            'costas': 'back',
            'dorsal': 'back',
            'pernas': 'legs',
            'leg': 'legs',
            'bra√ßos': 'arms',
            'braco': 'arms',
            'arm': 'arms',
            'ombro': 'shoulders',
            'shoulder': 'shoulders',
            'triceps': 'arms',
            'ganho de massa': 'hypertrophy',
            'massa muscular': 'hypertrophy',
            'hipertrofia': 'hypertrophy',
        }
        
        content_lower = content.lower()
        
        for text_pattern, focus_value in focus_map.items():
            if text_pattern in content_lower:
                return focus_value
        
        return 'full_body'
    
    @staticmethod
    def _extract_difficulty(content: str) -> str:
        """Extrai dificuldade - IGUAL"""
        content_lower = content.lower()
        
        if 'iniciante' in content_lower or 'beginner' in content_lower:
            return 'beginner'
        elif 'intermedi√°rio' in content_lower or 'intermediario' in content_lower:
            return 'intermediate'
        elif 'avan√ßado' in content_lower or 'avancado' in content_lower:
            return 'advanced'
        
        return 'intermediate'
    
    @staticmethod
    def _extract_exercises_by_day_improved(content: str) -> Dict:
        """
        üî• VERS√ÉO MELHORADA - Detecta m√∫ltiplos formatos
        
        Formatos suportados:
        - **Dia 1: Peito**
        - Dia 1: Peito
        - Segunda: Peito
        - **Segunda-feira: Peito**
        """
        exercises_by_day = {}
        
        # üî• Padr√µes MELHORADOS (case-insensitive com re.IGNORECASE)
        day_patterns = [
            # Formato: **Dia 1:** ou Dia 1:
            (r'\*?\*?dia\s*(\d+):?\*?\*?\s*([^\n*]*)', 'dia_{}'),
            
            # Formato: **Segunda:** ou Segunda:
            (r'\*?\*?(segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo):?\*?\*?\s*([^\n*]*)', '{}'),
            
            # Formato: **Segunda-feira:** 
            (r'\*?\*?(segunda-feira|ter√ßa-feira|quarta-feira|quinta-feira|sexta-feira|s√°bado|domingo):?\*?\*?\s*([^\n*]*)', '{}'),
        ]
        
        for pattern, key_format in day_patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE | re.MULTILINE)
            
            for match in matches:
                day_key = match.group(1)
                day_title = match.group(2) if len(match.groups()) >= 2 else day_key
                
                # Formatar chave do dia
                if pattern.startswith(r'\*?\*?dia'):
                    formatted_key = key_format.format(day_key)
                else:
                    formatted_key = day_key.lower().replace('-feira', '')
                
                logger.info(f"   üîç Detectou dia: {formatted_key} - {day_title}")
                
                # Extrair exerc√≠cios deste dia
                # Pegar texto at√© o pr√≥ximo "**Dia" ou "**Segunda" ou fim
                start_pos = match.end()
                
                # Procurar pr√≥ximo marcador de dia
                next_day_pattern = r'\*?\*?(dia\s*\d+|segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo)'
                next_match = re.search(next_day_pattern, content[start_pos:], re.IGNORECASE)
                
                if next_match:
                    end_pos = start_pos + next_match.start()
                else:
                    end_pos = len(content)
                
                day_content = content[start_pos:end_pos]
                
                # Extrair exerc√≠cios
                exercises = WorkoutPlanExtractor._extract_exercises_from_text(day_content)
                
                if exercises:
                    exercises_by_day[formatted_key] = {
                        'name': day_title.strip() or formatted_key,
                        'exercises': exercises
                    }
                    
                    logger.info(f"      ‚úÖ {len(exercises)} exerc√≠cios extra√≠dos")
        
        return exercises_by_day
    
    @staticmethod
    def _extract_exercises_from_text(text: str) -> List[Dict]:
        """
        Extrai exerc√≠cios de um bloco de texto
        
        Formatos suportados:
        - Supino Reto: 3 s√©ries de 8-12 repeti√ß√µes
        - * Supino Reto (barra): 3 s√©ries de 8-12 reps
        - Supino Reto - 3x8-12
        """
        exercises = []
        lines = text.split('\n')
        
        for line in lines:
            line = line.strip()
            
            if not line or line.startswith('*   Aquecimento') or line.startswith('*   Alongamento'):
                continue
            
            # üî• Padr√µes de exerc√≠cio (m√∫ltiplos formatos)
            patterns = [
                # Formato: Supino Reto: 3 s√©ries de 8-12 repeti√ß√µes
                r'^[*\-‚Ä¢]?\s*([^:()]+?)(?:\([^)]*\))?:\s*(\d+)\s*s√©ries?\s*de\s*([\d\-]+)\s*(?:repeti√ß√µes?|reps?)',
                
                # Formato: Supino Reto - 3x8-12
                r'^[*\-‚Ä¢]?\s*([^:()]+?)(?:\([^)]*\))?\s*-\s*(\d+)\s*x\s*([\d\-]+)',
                
                # Formato: Supino Reto (barra ou halteres): 3 s√©ries de 8-12 reps
                r'^[*\-‚Ä¢]?\s*([^:]+?):\s*(\d+)\s*s√©ries?\s*de\s*([\d\-]+)\s*reps?',
            ]
            
            for pattern in patterns:
                match = re.search(pattern, line, re.IGNORECASE)
                
                if match:
                    exercise_name = match.group(1).strip()
                    
                    # Limpar nome (remover texto entre par√™nteses)
                    exercise_name = re.sub(r'\([^)]*\)', '', exercise_name).strip()
                    
                    sets = int(match.group(2))
                    reps = match.group(3).strip()
                    
                    exercises.append({
                        'name': exercise_name,
                        'sets': sets,
                        'reps': reps,
                        'rest_time': 60,
                    })
                    
                    logger.info(f"         ‚Ä¢ {exercise_name}: {sets}x{reps}")
                    break
        
        return exercises
    
# apps/chatbot/services/chat_service.py



# ============================================================
# CLASSE PRINCIPAL DO CHATBOT
# ============================================================

class ChatService:
    """
    Servi√ßo principal para gerenciamento de conversas de chatbot com IA
    Integrado com Google Gemini + Fluxo de Gera√ß√£o de Treino
    """
    
    def __init__(self):
        self.ai_service = AIService()
        self.max_context_messages = 10
        self.conversation_timeout_hours = 24
        
    def start_conversation(self, user: User, conversation_type: str = 'general_fitness',
                          initial_message: str = None) -> Dict:
        """Inicia nova conversa de chatbot com contexto personalizado"""
        try:
            recent_conversation = Conversation.objects.filter(
                user=user,
                status='active',
                created_at__gte=timezone.now() - timedelta(hours=2)
            ).first()
            
            if recent_conversation and not initial_message:
                return {
                    'conversation_id': recent_conversation.id,
                    'status': 'resumed',
                    'message': 'Continuando conversa anterior...',
                    'conversation_type': recent_conversation.conversation_type,
                    'context_loaded': True
                }
            
            conversation = Conversation.objects.create(
                user=user,
                conversation_type=conversation_type,
                ai_model_used=getattr(settings, 'GEMINI_MODEL', 'gemini-2.5-flash') #gemini-2.0-flash
            )
            
            self._initialize_conversation_context(conversation)
            
            if not initial_message:
                welcome_response = self._generate_welcome_message(conversation)
                if welcome_response:
                    self._save_ai_message(
                        conversation, 
                        welcome_response['content'],
                        response_time_ms=welcome_response.get('response_time', 0),
                        confidence_score=welcome_response.get('confidence', 0.8)
                    )
            else:
                user_message = self._save_user_message(conversation, initial_message)
                ai_response = self.process_user_message(conversation.id, initial_message)
            
            return {
                'conversation_id': conversation.id,
                'status': 'created',
                'conversation_type': conversation_type,
                'context_loaded': True,
                'welcome_message': True,
                'ai_available': self.ai_service.is_available
            }
            
        except Exception as e:
            logger.error(f"Error starting conversation for user {user.id}: {e}")
            return {
                'error': 'N√£o foi poss√≠vel iniciar conversa',
                'fallback': 'Tente novamente em alguns instantes'
            }
    
    def process_user_message(self, conversation_id: int, message: str) -> Dict:
        """
        üî• Processa mensagem do usu√°rio e DETECTA PLANOS DE TREINO
        """
        start_time = time.time()
        
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            
            if conversation.is_expired():
                return {'error': 'Conversa expirada'}
            
            # Salvar mensagem do usu√°rio
            user_message = self._save_user_message(conversation, message)
            
            intent_analysis = self._analyze_message_intent(message, conversation)
            user_message.intent_detected = intent_analysis.get('intent', 'general_question')
            user_message.save()
            
            self._update_conversation_context(conversation, message, intent_analysis)
            
            # Gerar resposta da IA
            ai_response = self._generate_ai_response(conversation, message, intent_analysis)
            
            if ai_response and ai_response.get('success'):
                # üî• DEBUG: LOG ANTES DE DETECTAR
                logger.error("=" * 80)
                logger.error("üîç TENTANDO DETECTAR PLANO DE TREINO")
                logger.error(f"üìù Conte√∫do da IA (primeiros 500 chars):")
                logger.error(ai_response['content'][:500])
                logger.error("=" * 80)
                
                # üî• DETEC√á√ÉO AUTOM√ÅTICA DE PLANO
                plan_info = WorkoutPlanExtractor.extract_plan_info(ai_response['content'])
                
                # üî• DEBUG: LOG DEPOIS DE DETECTAR
                logger.error("=" * 80)
                logger.error(f"üéØ RESULTADO DA DETEC√á√ÉO:")
                logger.error(f"   plan_info = {plan_info}")
                logger.error("=" * 80)
                
                if plan_info:
                    logger.error("üèãÔ∏è Plano detectado! Criando treinos...")
                    
                    workout_creation = self._create_workouts_from_plan(
                        conversation,
                        plan_info
                    )
                    
                    if workout_creation.get('success'):
                        logger.error(f"‚úÖ {len(workout_creation['workouts'])} treinos criados!")
                        
                        structured_response = self._create_workout_success_response(
                            conversation,
                            ai_response['content'],
                            workout_creation['workouts'],
                            plan_info
                        )
                        
                        ai_message = self._save_ai_message(
                            conversation,
                            structured_response['response'],
                            response_time_ms=round((time.time() - start_time) * 1000, 2),
                            confidence_score=ai_response.get('confidence_score', 0.8),
                            intent='workout_generated'
                        )
                        
                        conversation.message_count += 2
                        conversation.ai_responses_count += 1
                        conversation.last_activity_at = timezone.now()
                        conversation.save()
                        
                        return {
                            'message_id': ai_message.id,
                            'response': structured_response['response'],
                            'conversation_updated': True,
                            'intent_detected': 'workout_generated',
                            'action': 'workouts_created',
                            'workouts_created': len(workout_creation['workouts']),
                            'workout_ids': [w['id'] for w in workout_creation['workouts']],
                            'options': structured_response.get('options', []),
                            'method': 'ai_plan_extraction',
                        }
                
                # Resposta normal (sem plano detectado)
                ai_message = self._save_ai_message(
                    conversation,
                    ai_response['content'],
                    response_time_ms=round((time.time() - start_time) * 1000, 2),
                    confidence_score=ai_response.get('confidence_score', 0.8),
                    intent=intent_analysis.get('intent')
                )
                
                conversation.message_count += 2
                conversation.ai_responses_count += 1
                conversation.last_activity_at = timezone.now()
                conversation.save()
                
                return {
                    'message_id': ai_message.id,
                    'response': ai_response['content'],
                    'conversation_updated': True,
                    'intent_detected': intent_analysis.get('intent'),
                    'confidence_score': ai_response.get('confidence_score'),
                    'method': 'gemini_ai',
                }
            
            # Fallback se IA falhou
            fallback_response = self._generate_fallback_response(
                conversation, message, intent_analysis
            )
            
            ai_message = self._save_ai_message(
                conversation,
                fallback_response,
                response_time_ms=round((time.time() - start_time) * 1000, 2),
                confidence_score=0.6,
                intent=intent_analysis.get('intent')
            )
            
            conversation.message_count += 2
            conversation.ai_responses_count += 1
            conversation.last_activity_at = timezone.now()
            conversation.save()
            
            return {
                'message_id': ai_message.id,
                'response': fallback_response,
                'conversation_updated': True,
                'method': 'rule_based_fallback',
            }
            
        except Conversation.DoesNotExist:
            return {'error': 'Conversa n√£o encontrada'}
        except Exception as e:
            logger.error(f"‚ùå ERRO no process_user_message: {e}")
            logger.error(traceback.format_exc())
            return {
                'error': 'Erro ao processar mensagem',
                'details': str(e),
                'method': 'error_handler'
            }
    
    def _create_workouts_from_plan(self, conversation: Conversation, plan_info: Dict) -> Dict:
        """Cria m√∫ltiplos treinos (um por dia) a partir do plano extra√≠do"""
        try:
            from apps.workouts.models import Workout, WorkoutExercise
            from apps.exercises.models import Exercise
            
            user = conversation.user
            workouts_created = []
            exercises_by_day = plan_info.get('exercises_by_day', {})
            
            logger.info(f"üìã Criando treinos para {len(exercises_by_day)} dias...")
            
            for day_num, (day_name, day_data) in enumerate(exercises_by_day.items(), 1):
                try:
                    workout_name = f"{day_data['name']} - {day_name.capitalize()}"
                    
                    # üî• CORRIGIDO: Criar Workout com campos corretos do modelo
                    workout = Workout.objects.create(
                        name=workout_name,
                        description=f"Treino de {day_name} gerado pela IA\n"
                                   f"Foco: {plan_info.get('focus', 'full body')}\n"
                                   f"Criado em: {datetime.now().strftime('%d/%m/%Y')}",
                        workout_type=plan_info.get('focus', 'full_body'),
                        difficulty_level=plan_info.get('difficulty', 'intermediate'),
                        created_by_user=user,  # üî• Campo correto para associar ao usu√°rio
                        is_recommended=True,  # üî• Marcar como treino recomendado pela IA
                        is_personalized=True,
                    )
                    
                    logger.info(f"‚úÖ Workout criado: {workout.name} (ID: {workout.id})")
                    
                    exercises = day_data.get('exercises', [])
                    
                    for order, exercise_data in enumerate(exercises, 1):
                        try:
                            exercise = Exercise.objects.filter(
                                name__icontains=exercise_data['name']
                            ).first()
                            
                            if not exercise:
                                logger.warning(
                                    f"‚ö†Ô∏è Exerc√≠cio n√£o encontrado: {exercise_data['name']}. "
                                    f"Criando gen√©rico..."
                                )
                                exercise = Exercise.objects.create(
                                    name=exercise_data['name'],
                                    description=f"Exerc√≠cio: {exercise_data['name']}",
                                    difficulty_level=plan_info.get('difficulty', 'intermediate'),
                                )
                            
                            WorkoutExercise.objects.create(
                                workout=workout,
                                exercise=exercise,
                                sets=exercise_data.get('sets', 3),
                                reps=exercise_data.get('reps', '8-12'),
                                rest_time=exercise_data.get('rest_time', 60),
                                order_in_workout=order,
                            )
                            
                            logger.info(f"   ‚úì {exercise.name}")
                            
                        except Exception as e:
                            logger.warning(f"   ‚úó Erro ao adicionar exerc√≠cio: {e}")
                    
                    workouts_created.append({
                        'id': workout.id,
                        'name': workout.name,
                        'day': day_name,
                        'exercises': len(exercises),
                    })
                    
                except Exception as e:
                    logger.error(f"‚ùå Erro ao criar workout para {day_name}: {e}")
            
            # üî• RETURN DENTRO DO TRY PRINCIPAL
            return {
                'success': len(workouts_created) > 0,
                'workouts': workouts_created,
                'total': len(workouts_created),
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico ao criar workouts: {e}")
            # üî• RETURN DENTRO DO EXCEPT
            return {'success': False, 'workouts': []}
    
    def _create_workout_success_response(self, conversation: Conversation, ai_content: str, 
                                        workouts: List[Dict], plan_info: Dict) -> Dict:
        """Cria resposta estruturada com bot√µes para os treinos criados"""
        try:
            days_created = ', '.join([w['day'].capitalize() for w in workouts])
            
            response_text = (
                f"‚úÖ **Treino criado com sucesso!**\n\n"
                f"üìã {len(workouts)} treinos gerados:\n"
                f"   ‚Ä¢ {days_created}\n\n"
                f"üí™ {sum(w['exercises'] for w in workouts)} exerc√≠cios no total\n"
                f"üìÖ {plan_info.get('days_per_week', 5)} dias por semana\n\n"
                f"**O que fazer agora?**"
            )
            
            options = []
            
            # Op√ß√£o 1: Ver todos os treinos
            options.append({
                'id': 'view_all_workouts',
                'label': 'üëÅÔ∏è Ver Todos os Treinos',
                'emoji': 'üëÅÔ∏è',
                'action': 'navigate',
                'data': {
                    'screen': 'my_workouts',
                    'filter': 'recent',
                }
            })
            
            # Op√ß√£o 2: Come√ßar primeiro treino
            if workouts:
                first_workout = workouts[0]
                options.append({
                    'id': 'start_first_workout',
                    'label': f"‚ñ∂Ô∏è Iniciar: {first_workout['day'].capitalize()}",
                    'emoji': '‚ñ∂Ô∏è',
                    'action': 'start_workout',
                    'data': {
                        'workout_id': first_workout['id'],
                    }
                })
            
            # Op√ß√£o 3: Continuar conversa
            options.append({
                'id': 'continue_chat',
                'label': 'üí¨ Continuar Conversa',
                'emoji': 'üí¨',
                'action': 'chat',
                'data': {}
            })
            
            return {
                'response': response_text,
                'options': options,
                'action': 'workouts_created',
                'metadata': {
                    'workouts_count': len(workouts),
                    'total_exercises': sum(w['exercises'] for w in workouts),
                    'created_at': datetime.now().isoformat(),
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar resposta: {e}")
            return {
                'response': '‚úÖ Treinos criados com sucesso!',
                'options': [],
                'action': 'workouts_created',
                'metadata': {}
            }
        # ============================================================
        # üî• M√âTODOS DO FLUXO DE GERA√á√ÉO DE TREINO
        # ============================================================
    
    def _check_workout_generation_flow(self, conversation_id: int, message: str) -> dict:
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            
            context = ChatContext.objects.filter(
                conversation=conversation,
                context_type='workflow',
                context_key='workout_generation'
            ).first()
            
            if not context:
               # context = ChatContext.set_context(...)
               context = ChatContext.set_context(
                conversation=conversation,
                context_type='workflow',
                key='workout_generation',
                value={'workout_flow_state': WorkoutGenerationFlow.STATE_INITIAL, 'workout_flow_data': {}},
                relevance=1.0
)
            
            flow_state = context.context_value.get('workout_flow_state')
            flow_data = context.context_value.get('workout_flow_data', {})
            
            logger.info(f"üìä Estado: {flow_state} | Dados: {flow_data}")
            
            # üî• NOVO: Verificar se o estado foi mantido incorretamente
            if flow_state and flow_data:
                # Se j√° tem focus E days, n√£o pode estar em WAITING_FOCUS
                if (flow_state == WorkoutGenerationFlow.STATE_WAITING_FOCUS and 
                    'focus' in flow_data and 'days' in flow_data):
                    
                    logger.warning("‚ö†Ô∏è Estado inconsistente! Corrigindo...")
                    
                    # Determinar estado correto
                    if 'difficulty' in flow_data:
                        correct_state = WorkoutGenerationFlow.STATE_WAITING_CONFIRMATION
                    elif 'days' in flow_data:
                        correct_state = WorkoutGenerationFlow.STATE_WAITING_DIFFICULTY
                    else:
                        correct_state = WorkoutGenerationFlow.STATE_WAITING_DAYS
                    
                    # Atualizar
                    ChatContext.set_context(
                        conversation=conversation,
                        context_type='workflow',
                        key='workout_generation',
                        value={
                            'workout_flow_state': correct_state,
                            'workout_flow_data': flow_data
                        },
                        relevance=1.0
                    )
                    
                    flow_state = correct_state
                    logger.info(f"‚úÖ Estado corrigido para: {flow_state}")
            
            # ============================================================
            # 5. PROCESSAR ESTADOS DO FLUXO
            # ============================================================
            
            # WAITING_FOCUS
            if flow_state == WorkoutGenerationFlow.STATE_WAITING_FOCUS:
                logger.info("‚è≥ WAITING_FOCUS")
                
                focus_key = WorkoutGenerationFlow.detect_focus_intent(message)
                logger.info(f"üéØ Focus detectado: {focus_key}")
                
                if focus_key:
                    focus_info = WorkoutGenerationFlow.FOCUS_OPTIONS.get(focus_key)
                    
                    if not focus_info:
                        logger.error(f"‚ùå Focus inv√°lido: {focus_key}")
                        return {
                            'in_flow': True,
                            'response': "‚ùå Op√ß√£o inv√°lida. Escolha 1-9 ou digite o nome."
                        }
                    
                    # Atualizar dados
                    flow_data['focus'] = focus_info['value']
                    flow_data['focus_label'] = focus_info['label']
                    
                    prompt = WorkoutGenerationFlow.get_days_prompt(focus_info['label'])
                    
                    # Salvar estado
                    ChatContext.set_context(
                        conversation=conversation,
                        context_type='workflow',
                        key='workout_generation',
                        value={
                            'workout_flow_state': prompt['next_state'],
                            'workout_flow_data': flow_data
                        },
                        relevance=1.0
                    )
                    
                    logger.info(f"‚úÖ Focus: {focus_info['label']} | Pr√≥ximo: {prompt['next_state']}")
                    
                    return {
                        'in_flow': True,
                        'response': prompt['message'],
                        'options': prompt.get('options', [])
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Focus n√£o reconhecido: {message}")
                    return {
                        'in_flow': True,
                        'response': "‚ùå Op√ß√£o inv√°lida.\n\n"
                                "**Escolha:**\n"
                                "‚Ä¢ N√∫mero: 1, 2, 3...\n"
                                "‚Ä¢ Nome: 'completo', 'peito', 'pernas'..."
                    }
            
            # WAITING_DAYS
            elif flow_state == WorkoutGenerationFlow.STATE_WAITING_DAYS:
                logger.info("‚è≥ WAITING_DAYS")
                
                days = WorkoutGenerationFlow.detect_days_intent(message)
                logger.info(f"üéØ Dias detectados: {days}")
                
                if days:
                    flow_data['days'] = days
                    
                    prompt = WorkoutGenerationFlow.get_difficulty_prompt(days)
                    
                    # Salvar estado
                    ChatContext.set_context(
                        conversation=conversation,
                        context_type='workflow',
                        key='workout_generation',
                        value={
                            'workout_flow_state': prompt['next_state'],
                            'workout_flow_data': flow_data
                        },
                        relevance=1.0
                    )
                    
                    logger.info(f"‚úÖ Dias: {days} | Pr√≥ximo: {prompt['next_state']}")
                    
                    return {
                        'in_flow': True,
                        'response': prompt['message'],
                        'options': prompt.get('options', [])
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Dias inv√°lidos: {message}")
                    return {
                        'in_flow': True,
                        'response': "‚ùå Escolha entre 3, 4, 5 ou 6 dias.\n\n"
                                "**Exemplo:** Digite apenas o n√∫mero: '5'"
                    }
            
            # WAITING_DIFFICULTY
            elif flow_state == WorkoutGenerationFlow.STATE_WAITING_DIFFICULTY:
                logger.info("‚è≥ WAITING_DIFFICULTY")
                
                difficulty_key = WorkoutGenerationFlow.detect_difficulty_intent(message)
                logger.info(f"üéØ Dificuldade: {difficulty_key}")
                
                if difficulty_key:
                    difficulty_info = WorkoutGenerationFlow.DIFFICULTY_OPTIONS.get(difficulty_key)
                    
                    if not difficulty_info:
                        logger.error(f"‚ùå Dificuldade inv√°lida: {difficulty_key}")
                        return {
                            'in_flow': True,
                            'response': "‚ùå Escolha: 1, 2 ou 3."
                        }
                    
                    flow_data['difficulty'] = difficulty_info['value']
                    flow_data['difficulty_label'] = difficulty_info['label']
                    
                    prompt = WorkoutGenerationFlow.get_confirmation_prompt(
                        flow_data.get('focus_label', ''),
                        flow_data.get('days', 5),
                        difficulty_info['label']
                    )
                    
                    # Salvar estado
                    ChatContext.set_context(
                        conversation=conversation,
                        context_type='workflow',
                        key='workout_generation',
                        value={
                            'workout_flow_state': prompt['next_state'],
                            'workout_flow_data': flow_data
                        },
                        relevance=1.0
                    )
                    
                    logger.info(f"‚úÖ Dificuldade: {difficulty_info['label']} | Pr√≥ximo: {prompt['next_state']}")
                    
                    return {
                        'in_flow': True,
                        'response': prompt['message'],
                        'options': prompt.get('options', [])
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Dificuldade n√£o reconhecida: {message}")
                    return {
                        'in_flow': True,
                        'response': "‚ùå Escolha:\n"
                                "‚Ä¢ 1 = Iniciante\n"
                                "‚Ä¢ 2 = Intermedi√°rio\n"
                                "‚Ä¢ 3 = Avan√ßado"
                    }
            
            # Nenhum fluxo ativo
            logger.info("‚ÑπÔ∏è Sem fluxo ativo")
            return {'in_flow': False}
            
            
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO: {e}")
            logger.error(traceback.format_exc())
            return {
                'in_flow': False,
                'error': str(e)
            }
    def generate_workout_with_ai(self, user, preferences: Dict) -> Dict:
        """
        Gera treino SEMANAL (separado por dias) usando IA
        
        preferences: {
            'focus': 'full_body', 'upper', 'lower', 'cardio', etc
            'days': 3-6
            'difficulty': 'beginner', 'intermediate', 'advanced'
        }
        
        Retorna:
        {
            'success': True,
            'workout_id': id,
            'workout_data': {...}
        }
        """
        try:
            from apps.users.models import UserProfile
            from apps.workouts.models import Workout, WorkoutExercise
            from apps.exercises.models import Exercise
            from apps.recommendations.services.ai_service import AIService
            
            logger.info(f"ü§ñ Gerando treino IA via chat para {user.email}")
            logger.info(f"   Prefer√™ncias: {preferences}")
            
            # 1. Buscar perfil do usu√°rio
            try:
                profile = UserProfile.objects.get(user=user)
            except UserProfile.DoesNotExist:
                logger.error("Perfil n√£o encontrado")
                return {
                    'success': False,
                    'error': 'Perfil incompleto',
                    'message': 'Complete seu perfil para gerar treinos'
                }
            
            # 2. Mapear dificuldade
            difficulty_map = {
                'iniciante': 'beginner',
                'intermediario': 'intermediate',
                'avancado': 'advanced'
            }
            difficulty = difficulty_map.get(
                preferences.get('difficulty', 'intermediate'),
                'intermediate'
            )
            
            # 3. Chamar IA para gerar plano
            ai_service = AIService()
            if not ai_service.is_available:
                logger.warning("IA n√£o dispon√≠vel, usando fallback")
                return self._generate_fallback_workout(user, preferences)
            
            # Calcular dura√ß√£o estimada (30-60 min por treino)
            duration = preferences.get('duration', 45)
            
            workout_plan = ai_service.generate_personalized_workout_plan(
                profile,
                duration=duration,
                focus=preferences.get('focus', 'full_body'),
                difficulty=difficulty
            )
            
            if not workout_plan:
                logger.error("IA n√£o retornou plano v√°lido")
                return self._generate_fallback_workout(user, preferences)
            
            # 4. NOVO: Estruturar como plano SEMANAL
            weekly_workout = self._structure_workout_by_days(
                workout_plan,
                preferences.get('days', 5),
                preferences.get('focus', 'full_body')
            )
            
            # 5. Criar Workout no banco de dados
            workout = Workout.objects.create(
                name=weekly_workout['name'],
                description=weekly_workout['description'],
                difficulty_level=difficulty,
                estimated_duration=duration,
                target_muscle_groups=weekly_workout.get('target_muscle_groups', ''),
                equipment_needed=weekly_workout.get('equipment_needed', 'Variado'),
                calories_estimate=weekly_workout.get('calories_estimate', 200),
                workout_type=weekly_workout.get('workout_type', 'full_body'),
                is_recommended=True,
                is_personalized=True,
                created_by_user=user
            )
            
            logger.info(f"‚úÖ Workout criado: {workout.name} (ID: {workout.id})")
            
            # 6. Adicionar exerc√≠cios por dia
            exercises_added = 0
            for day_data in weekly_workout.get('days', []):
                for idx, ex_data in enumerate(day_data.get('exercises', []), start=1):
                    # Buscar ou criar exerc√≠cio
                    exercise, created = Exercise.objects.get_or_create(
                        name=ex_data.get('name', f'Exerc√≠cio {idx}'),
                        defaults={
                            'description': ex_data.get('description', ''),
                            'muscle_group': ex_data.get('muscle_group', 'full_body'),
                            'difficulty_level': difficulty,
                            'equipment_needed': ex_data.get('equipment_needed', 'bodyweight'),
                            'duration_minutes': ex_data.get('duration_minutes', 5),
                            'calories_per_minute': 5.0,
                            'instructions': ex_data.get('instructions', []),
                        }
                    )
                    
                    # Criar WorkoutExercise
                    WorkoutExercise.objects.create(
                        workout=workout,
                        exercise=exercise,
                        sets=ex_data.get('sets', 3),
                        reps=ex_data.get('reps', '12-15'),
                        weight=ex_data.get('weight'),
                        rest_time=ex_data.get('rest_time', 60),
                        order_in_workout=idx,
                        notes=f"Dia: {day_data.get('day', 'N/A')}\n" + 
                            '\n'.join(ex_data.get('tips', []))
                    )
                    exercises_added += 1
            
            logger.info(f"‚úÖ Total: {exercises_added} exerc√≠cios adicionados")
            
            return {
                'success': True,
                'workout_id': workout.id,
                'workout_name': workout.name,
                'total_exercises': exercises_added,
                'days_per_week': preferences.get('days', 5),
                'difficulty': difficulty,
                'focus': preferences.get('focus', 'full_body'),
                'estimated_duration': duration
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar treino com IA: {e}")
            import traceback
            logger.error(traceback.format_exc())
            
            return {
                'success': False,
                'error': 'Erro ao gerar treino',
                'details': str(e)
            }

    def _structure_workout_by_days(self, workout_plan: Dict, days_per_week: int, 
                                focus: str) -> Dict:
        """
        Estrutura plano de treino da IA para organiza√ß√£o por DIAS
        
        Exemplo retorno:
        {
            'name': 'Plano Semanal - Upper/Lower',
            'days': [
                {
                    'day': 'Segunda',
                    'focus': 'Peito e Tr√≠ceps',
                    'exercises': [...]
                },
                ...
            ]
        }
        """
        exercises = workout_plan.get('exercises', [])
        
        # Definir estrutura de dias
        if focus == 'full_body':
            day_structure = [
                {'day': 'Segunda', 'focus': 'Peito e Tr√≠ceps', 'muscle_groups': ['chest', 'arms']},
                {'day': 'Ter√ßa', 'focus': 'Costas e B√≠ceps', 'muscle_groups': ['back', 'arms']},
                {'day': 'Quarta', 'focus': 'Pernas', 'muscle_groups': ['legs', 'glutes']},
                {'day': 'Quinta', 'focus': 'Ombros', 'muscle_groups': ['shoulders']},
                {'day': 'Sexta', 'focus': 'Cardio/Flexibilidade', 'muscle_groups': ['cardio']},
                {'day': 'S√°bado', 'focus': 'Complemento', 'muscle_groups': ['full_body']},
            ]
        elif focus == 'upper':
            day_structure = [
                {'day': 'Segunda', 'focus': 'Peito', 'muscle_groups': ['chest']},
                {'day': 'Quarta', 'focus': 'Costas', 'muscle_groups': ['back']},
                {'day': 'Sexta', 'focus': 'Ombros/Bra√ßos', 'muscle_groups': ['shoulders', 'arms']},
            ]
        elif focus == 'lower':
            day_structure = [
                {'day': 'Segunda', 'focus': 'Quadr√≠ceps', 'muscle_groups': ['legs']},
                {'day': 'Quarta', 'focus': 'Posteriores/Gl√∫teos', 'muscle_groups': ['glutes', 'legs']},
                {'day': 'Sexta', 'focus': 'Pernas Completo', 'muscle_groups': ['legs', 'glutes']},
            ]
        elif focus == 'cardio':
            day_structure = [
                {'day': 'Segunda', 'focus': 'Cardio Intenso', 'muscle_groups': ['cardio']},
                {'day': 'Quarta', 'focus': 'Cardio Moderado', 'muscle_groups': ['cardio']},
                {'day': 'Sexta', 'focus': 'Cardio Leve', 'muscle_groups': ['cardio']},
            ]
        else:
            day_structure = [
                {'day': 'Segunda', 'focus': 'Treino Geral', 'muscle_groups': ['full_body']},
                {'day': 'Quarta', 'focus': 'Treino Geral', 'muscle_groups': ['full_body']},
                {'day': 'Sexta', 'focus': 'Treino Geral', 'muscle_groups': ['full_body']},
            ]
        
        # Selecionar apenas os dias necess√°rios
        selected_days = day_structure[:days_per_week]
        
        # Distribuir exerc√≠cios entre os dias
        exercises_per_day = max(1, len(exercises) // len(selected_days))
        
        for i, day_info in enumerate(selected_days):
            start_idx = i * exercises_per_day
            end_idx = start_idx + exercises_per_day
            
            day_exercises = exercises[start_idx:end_idx]
            
            # Se √© o √∫ltimo dia, adicionar exerc√≠cios restantes
            if i == len(selected_days) - 1:
                day_exercises = exercises[start_idx:]
            
            day_info['exercises'] = day_exercises
        
        return {
            'name': f"Plano Semanal - {focus.replace('_', ' ').title()}",
            'description': f"Treino de {days_per_week} dias por semana focado em {focus}",
            'target_muscle_groups': focus,
            'equipment_needed': workout_plan.get('equipment_needed', 'Variado'),
            'calories_estimate': workout_plan.get('calories_estimate', 200),
            'workout_type': workout_plan.get('workout_type', 'full_body'),
            'days': selected_days
        }

    def _generate_fallback_workout(self, user, preferences: Dict) -> Dict:
        """Fallback quando IA n√£o est√° dispon√≠vel"""
        logger.warning("Usando fallback para gera√ß√£o de treino")
        # Retornar erro ou usar m√©todo anterior sem IA
        return {
            'success': False,
            'error': 'IA temporariamente indispon√≠vel',
            'message': 'Tente novamente em alguns minutos'
        }    
    def clear_workout_flow(self, conversation_id: int):
        """Limpa o fluxo de gera√ß√£o de treino"""
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            
            ChatContext.set_context(
                conversation=conversation,
                context_type='workflow',
                key='workout_generation',
                value={
                    'workout_flow_state': None,
                    'workout_flow_data': {}
                },
                relevance=0.5
            )
            
            logger.info(f"‚úÖ Fluxo limpo: conversa {conversation_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar fluxo: {e}")

    # üî• ADICIONAR: M√©todo auxiliar no ChatService
    def get_flow_state(self, conversation_id: int) -> dict:
        """Retorna estado atual do fluxo (para debug)"""
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            context = ChatContext.objects.filter(conversation=conversation).first()
            
            if context:
                return {
                    'has_context': True,
                    'context_id': context.id,
                    'context_type': context.context_type,
                    'context_key': context.context_key,
                    'context_value_type': type(context.context_value).__name__,
                    'flow_state': context.context_value.get('workout_flow_state'),
                    'flow_data': context.context_value.get('workout_flow_data'),
                }
            return {'has_context': False}
        
        except Exception as e:
            return {'error': str(e), 'traceback': traceback.format_exc()}
        
    def get_flow_debug(self, conversation_id: int) -> dict:
        """Retorna estado do fluxo para debug"""
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            
            context = ChatContext.objects.filter(
                conversation=conversation,
                context_type='workflow',
                context_key='workout_generation'
            ).first()
            
            if context:
                return {
                    'has_context': True,
                    'context_id': context.id,
                    'flow_state': context.context_value.get('workout_flow_state'),
                    'flow_data': context.context_value.get('workout_flow_data'),
                    'updated_at': context.updated_at.isoformat()
                }
            
            return {'has_context': False}
        
        except Exception as e:
            return {'error': str(e)}
    
    # üî• ADICIONAR: M√©todo para verificar estado atual (DEBUG)
    def get_flow_debug_info(self, conversation_id: int) -> dict:
        """Retorna informa√ß√µes de debug do fluxo"""
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            context = ChatContext.objects.filter(conversation=conversation).first()
            
            if context:
                return {
                    'has_context': True,
                    'flow_state': context.context_value.get('workout_flow_state'),
                    'flow_data': context.context_value.get('workout_flow_data'),
                    'context_type': context.context_type,
                    'context_key': context.context_key,
                }
            return {'has_context': False}
        except Exception as e:
            return {'error': str(e)}
    
    # ============================================================
    # M√âTODOS EXISTENTES (SEM ALTERA√á√ÉO)
    # ============================================================
    
    def _initialize_conversation_context(self, conversation: Conversation):
        """Carrega contexto inicial do usu√°rio para personaliza√ß√£o"""
        try:
            user = conversation.user
            
            try:
                profile = UserProfile.objects.get(user=user)
                ChatContext.set_context(
                    conversation, 'user_profile', 'basic_info',
                    {
                        'goal': profile.goal,
                        'activity_level': profile.activity_level,
                        'focus_areas': profile.focus_areas,
                        'age': profile.age,
                        'current_weight': profile.current_weight,
                        'target_weight': profile.target_weight,
                    },
                    relevance=1.0
                )
            except UserProfile.DoesNotExist:
                ChatContext.set_context(
                    conversation, 'user_profile', 'basic_info',
                    {'profile_complete': False},
                    relevance=0.5
                )
            
            recent_sessions = WorkoutSession.objects.filter(
                user=user,
                completed=True,
                completed_at__gte=timezone.now() - timedelta(days=7)
            ).order_by('-completed_at')[:5]
            
            workout_history = []
            for session in recent_sessions:
                workout_history.append({
                    'workout_name': session.workout.name if session.workout else 'Treino Personalizado',
                    'completed_at': session.completed_at.strftime('%d/%m/%Y'),
                    'rating': session.user_rating,
                    'duration': session.actual_duration
                })
            
            ChatContext.set_context(
                conversation, 'workout_history', 'recent_workouts',
                {'recent_sessions': workout_history},
                relevance=0.8
            )
            
            ChatContext.set_context(
                conversation, 'preferences', 'conversation_style',
                {'preferred_response_length': 'medium', 'technical_level': 'intermediate'},
                relevance=0.6
            )
            
        except Exception as e:
            logger.error(f"Error initializing conversation context: {e}")
    
    def _analyze_message_intent(self, message: str, conversation: Conversation) -> Dict:
        """Analisa inten√ß√£o da mensagem usando regras"""
        try:
            cache_key = f"intent_analysis_{hash(message.lower())}"
            cached_intent = cache.get(cache_key)
            if cached_intent:
                return cached_intent
            
            rule_intent = self._rule_based_intent_analysis(message)
            cache.set(cache_key, rule_intent, 1800)
            return rule_intent
            
        except Exception as e:
            logger.error(f"Error analyzing message intent: {e}")
            return {'intent': 'general_question', 'confidence': 0.5}
    
    def _rule_based_intent_analysis(self, message: str) -> Dict:
        """An√°lise de inten√ß√£o baseada em regras"""
        message_lower = message.lower()
        
        intent_keywords = {
            'workout_request': ['treino', 'exerc√≠cio', 'workout', 's√©rie', 'repeti√ß√£o', 'treinar'],
            'technique_question': ['como', 't√©cnica', 'forma', 'postura', 'execu√ß√£o', 'executar'],
            'nutrition_advice': ['alimenta√ß√£o', 'dieta', 'nutri√ß√£o', 'prote√≠na', 'comer', 'comida'],
            'progress_inquiry': ['progresso', 'resultado', 'evolu√ß√£o', 'melhora', 'crescimento'],
            'motivation_need': ['motiva√ß√£o', 'des√¢nimo', 'pregui√ßa', 'for√ßa', 'conseguir'],
            'equipment_question': ['equipamento', 'aparelho', 'peso', 'halteres', 'academia'],
            'injury_concern': ['dor', 'les√£o', 'machuca', 'problema', 'desconforto'],
            'schedule_planning': ['rotina', 'hor√°rio', 'frequ√™ncia', 'quando', 'quantas vezes']
        }
        
        intent_scores = {}
        for intent, keywords in intent_keywords.items():
            score = sum([1 for keyword in keywords if keyword in message_lower])
            if score > 0:
                intent_scores[intent] = score / len(keywords)
        
        if intent_scores:
            main_intent = max(intent_scores, key=intent_scores.get)
            confidence = intent_scores[main_intent]
        else:
            main_intent = 'general_question'
            confidence = 0.5
        
        return {
            'intent': main_intent,
            'confidence': confidence,
            'secondary_intents': [intent for intent, score in intent_scores.items() 
                                 if intent != main_intent and score > 0.2],
            'keywords': [word for word in message_lower.split() 
                        if any(word in keywords for keywords in intent_keywords.values())],
            'urgency_level': 'high' if any(word in message_lower for word in ['dor', 'les√£o', 'urgente']) else 'medium',
            'requires_personalization': True
        }
    
    def _generate_ai_response(self, conversation: Conversation, message: str, intent_analysis: Dict) -> Optional[Dict]:
        """Gera resposta usando Gemini"""
        if not self.ai_service.is_available:
            logger.warning("Gemini AI not available, will use fallback")
            return None
        
        try:
            context_data = self._build_conversation_context(conversation)
            recent_messages = conversation.get_last_messages(6)
            
            conversation_history = ""
            for msg in reversed(recent_messages):
                role = "Usu√°rio" if msg.message_type == 'user' else "Alex"
                conversation_history += f"{role}: {msg.content}\n"
            
            system_context = self._build_fitness_chat_system_prompt(intent_analysis, context_data)
            
            full_prompt = f"""{system_context}

HIST√ìRICO DA CONVERSA:
{conversation_history}

MENSAGEM ATUAL DO USU√ÅRIO:
{message}

Responda de forma natural, personalizada e √∫til. M√°ximo 200 palavras."""
            
            response = self.ai_service._make_gemini_request(full_prompt)
            
            if response:
                processed_response = self._process_ai_response(response, intent_analysis)
                return processed_response
            
        except Exception as e:
            logger.error(f"Error generating Gemini AI response: {e}")
        
        return None
    
    def _build_fitness_chat_system_prompt(self, intent_analysis: Dict, context_data: Dict) -> str:
        """Constr√≥i prompt de sistema otimizado para chat fitness"""
        user_profile = context_data.get('user_profile', {})
        workout_history = context_data.get('workout_history', {})
        
        base_prompt = """Voc√™ √© Alex, um personal trainer virtual especialista em fitness com 10 anos de experi√™ncia.

PERSONALIDADE:
- Amig√°vel, motivador e profissional
- Usa linguagem clara e acess√≠vel
- Encoraja sem ser excessivo
- Foca na seguran√ßa e na progress√£o gradual
- Baseado em evid√™ncia cient√≠fica

DIRETRIZES DE RESPOSTA:
- M√°ximo 200 palavras por resposta
- Use emojis ocasionalmente para engajamento
- Seja espec√≠fico e pr√°tico
- Sempre priorize a seguran√ßa
- Adapte ao n√≠vel do usu√°rio"""
        
        if user_profile.get('goal'):
            base_prompt += f"\n\nOBJETIVO DO USU√ÅRIO: {user_profile['goal']}"
        
        if user_profile.get('activity_level'):
            base_prompt += f"\nN√çVEL ATUAL: {user_profile['activity_level']}"
        
        intent_contexts = {
            'workout_request': "\nFOCO: Recomende exerc√≠cios seguros e progressivos. Sempre inclua aquecimento e alongamento.",
            'technique_question': "\nFOCO: Explique t√©cnica com clareza, enfatize seguran√ßa e sugira progress√µes.",
            'nutrition_advice': "\nFOCO: D√™ orienta√ß√µes gerais, sempre recomende consulta com nutricionista para planos espec√≠ficos.",
            'progress_inquiry': "\nFOCO: Analise dados dispon√≠veis, celebre conquistas e sugira pr√≥ximos passos.",
            'motivation_need': "\nFOCO: Seja encorajador, lembre dos benef√≠cios e sugira estrat√©gias pr√°ticas.",
            'injury_concern': "\nFOCO: Priorize seguran√ßa, recomende descanso se necess√°rio e consulta profissional."
        }
        
        intent = intent_analysis.get('intent', 'general_question')
        if intent in intent_contexts:
            base_prompt += intent_contexts[intent]
        
        if workout_history.get('recent_sessions'):
            base_prompt += f"\n\nHIST√ìRICO RECENTE: {len(workout_history['recent_sessions'])} treinos realizados recentemente."
        
        base_prompt += "\n\nSempre termine perguntando se precisa de mais alguma coisa ou esclarecimento adicional."
        
        return base_prompt
    
    def _process_ai_response(self, response: str, intent_analysis: Dict) -> Dict:
        """Processa resposta da IA para extrair metadados √∫teis"""
        processed = {
            'success': True,
            'content': response,
            'confidence_score': 0.85,
            'suggested_actions': [],
            'workout_references': []
        }
        
        response_lower = response.lower()
        
        action_patterns = {
            'try_exercise': ['experimente', 'tente fazer', 'fa√ßa'],
            'rest_recovery': ['descanse', 'pause', 'recupera√ß√£o'],
            'seek_professional': ['consulte', 'procure um', 'm√©dico', 'fisioterapeuta'],
            'schedule_workout': ['agende', 'planeje', 'organize'],
            'track_progress': ['anote', 'registre', 'acompanhe']
        }
        
        for action, patterns in action_patterns.items():
            if any(pattern in response_lower for pattern in patterns):
                processed['suggested_actions'].append(action)
        
        exercise_mentions = []
        common_exercises = ['agachamento', 'flex√£o', 'corrida', 'caminhada', 'prancha', 'abdominais']
        
        for exercise in common_exercises:
            if exercise in response_lower:
                exercise_mentions.append(exercise)
        
        processed['workout_references'] = exercise_mentions
        
        return processed
    
    def _generate_fallback_response(self, conversation: Conversation, message: str, intent_analysis: Dict) -> str:
        """Gera resposta baseada em regras quando IA n√£o est√° dispon√≠vel"""
        intent = intent_analysis.get('intent', 'general_question')
        user_name = conversation.user.first_name or 'amigo(a)'
        
        fallback_responses = {
            'workout_request': f"Ol√°, {user_name}! Para recomenda√ß√µes de treino personalizadas, que tal come√ßarmos com alguns exerc√≠cios b√°sicos? Posso sugerir um treino de corpo inteiro com agachamentos, flex√µes e prancha. Voc√™ tem alguma prefer√™ncia espec√≠fica ou restri√ß√£o?",
            
            'technique_question': f"√ìtima pergunta sobre t√©cnica, {user_name}! A execu√ß√£o correta √© fundamental para evitar les√µes e maximizar resultados. Para exerc√≠cios espec√≠ficos, sempre foque em: postura correta, movimento controlado, respira√ß√£o adequada e progress√£o gradual. Sobre qual exerc√≠cio voc√™ gostaria de saber mais?",
            
            'nutrition_advice': f"Nutri√ß√£o √© super importante, {user_name}! Algumas dicas b√°sicas: mantenha-se hidratado, inclua prote√≠nas em cada refei√ß√£o, e consuma vegetais variados. Para um plano nutricional espec√≠fico, recomendo consultar um nutricionista qualificado. Posso ajudar com mais alguma coisa sobre fitness?",
            
            'progress_inquiry': f"Que bom que voc√™ est√° acompanhando seu progresso, {user_name}! O importante √© a consist√™ncia. Celebre cada pequena vit√≥ria e lembre-se que resultados levam tempo. Continue firme na sua rotina! Como voc√™ tem se sentido nos treinos recentes?",
            
            'motivation_need': f"Entendo, {user_name}. Todos passamos por momentos assim! Lembre-se: cada treino √© um investimento na sua sa√∫de e bem-estar. Comece pequeno se necess√°rio - at√© 10 minutos j√° fazem diferen√ßa. Voc√™ √© mais forte do que imagina! O que te motivou a come√ßar essa jornada?",
            
            'injury_concern': f"Sua seguran√ßa √© prioridade, {user_name}. Se voc√™ est√° sentindo dor, √© importante parar e avaliar. Para dores persistentes, sempre consulte um profissional de sa√∫de. No treino, escute sempre seu corpo. Posso ajudar com exerc√≠cios de baixo impacto enquanto se recupera?",
            
            'general_question': f"Oi, {user_name}! Estou aqui para ajudar com suas d√∫vidas sobre fitness. Posso orientar sobre exerc√≠cios, t√©cnicas, motiva√ß√£o e planejamento de treinos. No que posso te auxiliar hoje?"
        }
        
        return fallback_responses.get(intent, fallback_responses['general_question'])
    
    def _generate_welcome_message(self, conversation: Conversation) -> Optional[Dict]:
        """Gera mensagem de boas-vindas personalizada"""
        try:
            user_name = conversation.user.first_name or 'atleta'
            conversation_type = conversation.conversation_type
            
            if self.ai_service.is_available:
                context_data = self._build_conversation_context(conversation)
                ai_welcome = self._gemini_welcome_message(user_name, conversation_type, context_data)
                if ai_welcome:
                    return ai_welcome
            
            type_messages = {
                'workout_consultation': f"Ol√°, {user_name}! üí™ Sou Alex, seu personal trainer virtual. Estou aqui para ajudar voc√™ a criar treinos personalizados e alcan√ßar seus objetivos. Como posso te ajudar hoje?",
                
                'progress_analysis': f"Oi, {user_name}! üìà Que bom te ver aqui! Vamos analisar seu progresso e ver como voc√™ est√° evoluindo. Tenho algumas perguntas para entender melhor sua jornada. Pronto para come√ßar?",
                
                'motivation_chat': f"Hey, {user_name}! üåü √Äs vezes todos precisamos de um empurr√£ozinho, n√©? Estou aqui para te motivar e lembrar do incr√≠vel que voc√™ √©. Vamos conversar sobre o que est√° te preocupando?",
                
                'technique_guidance': f"Salve, {user_name}! üéØ T√©cnica correta √© tudo no fitness! Estou aqui para te ajudar com d√∫vidas sobre execu√ß√£o de exerc√≠cios e boa forma. Qual movimento voc√™ gostaria de aperfei√ßoar?",
                
                'general_fitness': f"Ol√°, {user_name}! üèÉ‚Äç‚ôÇÔ∏è Bem-vindo(a) ao seu chat fitness personalizado! Sou Alex e estou aqui para tirar d√∫vidas, sugerir treinos e te apoiar nessa jornada. O que voc√™ gostaria de saber?"
            }
            
            welcome_content = type_messages.get(conversation_type, type_messages['general_fitness'])
            
            return {
                'content': welcome_content,
                'confidence': 0.8,
                'response_time': 100
            }
            
        except Exception as e:
            logger.error(f"Error generating welcome message: {e}")
            return {
                'content': f"Ol√°! Sou Alex, seu assistente de fitness. Como posso ajudar voc√™ hoje?",
                'confidence': 0.6,
                'response_time': 50
            }
    
    def _gemini_welcome_message(self, user_name: str, conversation_type: str, context_data: Dict) -> Optional[Dict]:
        """Gera mensagem de boas-vindas usando Gemini"""
        try:
            user_profile = context_data.get('user_profile', {})
            
            prompt = f"""Crie uma mensagem de boas-vindas personalizada e motivadora para {user_name}.

TIPO DE CONVERSA: {conversation_type}
PERFIL: {user_profile.get('goal', 'n√£o informado')}
N√çVEL: {user_profile.get('activity_level', 'n√£o informado')}

REQUISITOS:
- M√°ximo 100 palavras
- Tom amig√°vel e profissional
- Mencione o nome da pessoa
- Relacione com o tipo de conversa
- Termine com pergunta envolvente
- Use 1-2 emojis apropriados

Voc√™ √© Alex, um personal trainer virtual. Responda apenas com a mensagem, sem formata√ß√£o extra."""
            
            start_time = time.time()
            response = self.ai_service._make_gemini_request(prompt)
            
            if response:
                return {
                    'content': response.strip(),
                    'confidence': 0.9,
                    'response_time': round((time.time() - start_time) * 1000)
                }
                
        except Exception as e:
            logger.error(f"Error generating Gemini welcome message: {e}")
        
        return None
    
    def _save_user_message(self, conversation: Conversation, content: str) -> Message:
        """Salva mensagem do usu√°rio"""
        return Message.objects.create(
            conversation=conversation,
            message_type='user',
            content=content,
            status='delivered'
        )
    
    def _save_ai_message(self, conversation: Conversation, content: str, 
                        response_time_ms: int = 0, confidence_score: float = 0.8,
                        intent: str = None) -> Message:
        """Salva mensagem da IA com modelo Gemini"""
        return Message.objects.create(
            conversation=conversation,
            message_type='ai',
            content=content,
            confidence_score=confidence_score,
            ai_model_version=getattr(settings, 'GEMINI_MODEL', 'gemini-2.5-flash'),
            response_time_ms=response_time_ms,
            tokens_used=len(content.split()) * 1.3,
            intent_detected=intent,
            status='delivered'
        )
    
    def _build_conversation_context(self, conversation: Conversation) -> Dict:
        """Constr√≥i contexto completo da conversa"""
        context_data = {}
        contexts = ChatContext.get_context(conversation)
        
        for context in contexts:
            context_type = context.context_type
            if context_type not in context_data:
                context_data[context_type] = {}
            context_data[context_type][context.context_key] = context.context_value
        
        return context_data
    
    def _update_conversation_context(self, conversation: Conversation, message: str, intent_analysis: Dict):
        """Atualiza contexto da conversa baseado na mensagem atual"""
        try:
            message_length = len(message.split())
            if message_length > 20:
                ChatContext.set_context(
                    conversation, 'preferences', 'message_style',
                    {'prefers_detailed': True, 'last_message_length': message_length},
                    relevance=0.7
                )
            
            intent = intent_analysis.get('intent')
            if intent:
                current_topics = ChatContext.get_context(
                    conversation, 'preferences', 'topics_of_interest'
                ).first()
                
                if current_topics:
                    topics = current_topics.context_value.get('topics', [])
                    if intent not in topics:
                        topics.append(intent)
                        topics = topics[-5:]
                    
                    ChatContext.set_context(
                        conversation, 'preferences', 'topics_of_interest',
                        {'topics': topics},
                        relevance=0.6
                    )
                else:
                    ChatContext.set_context(
                        conversation, 'preferences', 'topics_of_interest',
                        {'topics': [intent]},
                        relevance=0.6
                    )
            
        except Exception as e:
            logger.error(f"Error updating conversation context: {e}")
    
    def get_conversation_history(self, conversation_id: int, limit: int = 50) -> List[Dict]:
        """Retorna hist√≥rico formatado da conversa"""
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            messages = conversation.messages.order_by('created_at')[:limit]
            
            history = []
            for message in messages:
                history.append({
                    'id': message.id,
                    'type': message.message_type,
                    'content': message.content,
                    'timestamp': message.created_at.isoformat(),
                    'intent': message.intent_detected,
                    'confidence': message.confidence_score,
                    'user_reaction': message.user_reaction
                })
            
            return history
            
        except Conversation.DoesNotExist:
            return []
        except Exception as e:
            logger.error(f"Error getting conversation history: {e}")
            return []
    
    def end_conversation(self, conversation_id: int, user_rating: float = None) -> Dict:
        """Finaliza conversa com avalia√ß√£o opcional"""
        try:
            conversation = Conversation.objects.get(id=conversation_id)
            conversation.status = 'completed'
            
            if user_rating:
                conversation.user_satisfaction_rating = user_rating
            
            conversation.save()
            
            # Limpar fluxo de treino ao finalizar
            self.clear_workout_flow(conversation_id)
            
            return {
                'conversation_ended': True,
                'total_messages': conversation.message_count,
                'duration_minutes': (timezone.now() - conversation.created_at).total_seconds() / 60,
                'rating_saved': user_rating is not None
            }
            
        except Conversation.DoesNotExist:
            return {'error': 'Conversa n√£o encontrada'}
        except Exception as e:
            logger.error(f"Error ending conversation: {e}")
            return {'error': 'Erro ao finalizar conversa'}