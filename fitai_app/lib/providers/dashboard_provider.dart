import 'package:flutter/material.dart';
import '../service/api_service.dart';
import '../models/workout_history_model.dart';
import 'dart:convert';

/// Provider para gerenciar dados do Dashboard
/// ‚ú® ATUALIZADO: Prioriza treinos gerados pela IA
class DashboardProvider extends ChangeNotifier {
  // ============================================================
  // ESTADO
  // ============================================================
  
  bool _isLoading = false;
  String? _error;
  
  // Estat√≠sticas do usu√°rio
  int _totalWorkouts = 0;
  int _activeDays = 0;
  double _weeklyGoalPercentage = 0.0;
  
  // Treino recomendado do dia (pode vir da IA ou do backend)
  Map<String, dynamic>? _recommendedWorkout;
  bool _isAIRecommendation = false; // Indica se veio da IA
  String? _aiRecommendationReason; // Motivo da recomenda√ß√£o
  
  // üî• NOVO: Flag para indicar se √© treino GERADO pela IA (n√£o apenas recomendado)
  bool _isAIGeneratedWorkout = false;
  
  // Recomenda√ß√£o IA (mensagem motivacional)
  String? _aiMotivationalMessage;
  int? _daysSinceLastWorkout;
  bool _isLoadingAIRecommendation = false;

   // üî• NOVO: Recomenda√ß√£o di√°ria da IA
  Map<String, dynamic>? _dailyAIRecommendation;
  bool _hasDailyAIRecommendation = false;
  String _aiRecommendationType = 'motivation';
  String _aiRecommendationEmoji = 'üí™';
  
  // Hist√≥rico para c√°lculos
  List<WorkoutHistoryModel> _workoutHistory = [];

  // NOVOS CAMPOS - Recomenda√ß√£o inteligente
  Map<String, dynamic> _smartRecommendation = {};
  Map<String, dynamic> _analysisData = {};
  String _recommendationReason = '';
  double _confidenceScore = 0.0;
  List<String> _personalizationFactors = [];
  bool _hasSmartRecommendation = false;
  
  // ============================================================
  // GETTERS
  // ============================================================
  
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get hasData => _totalWorkouts > 0 || _recommendedWorkout != null;
  
  // Estat√≠sticas
  int get totalWorkouts => _totalWorkouts;
  int get activeDays => _activeDays;
  double get weeklyGoalPercentage => _weeklyGoalPercentage;
  String get weeklyGoalDisplay => '${_weeklyGoalPercentage.toStringAsFixed(0)}%';
  
  // Treino recomendado
  Map<String, dynamic>? get recommendedWorkout => _recommendedWorkout;
  bool get hasRecommendedWorkout => _recommendedWorkout != null;
  bool get isAIRecommendation => _isAIRecommendation;
  bool get isAIGeneratedWorkout => _isAIGeneratedWorkout;
  String? get aiRecommendationReason => _aiRecommendationReason;
  
  // Recomenda√ß√£o IA
  String get aiRecommendation => _aiMotivationalMessage ?? 'Mantenha a consist√™ncia nos treinos!';
  int get daysSinceLastWorkout => _daysSinceLastWorkout ?? 0;
  bool get isLoadingAIRecommendation => _isLoadingAIRecommendation;

   // üî• NOVO: Getters da recomenda√ß√£o di√°ria
  Map<String, dynamic>? get dailyAIRecommendation => _dailyAIRecommendation;
  bool get hasDailyAIRecommendation => _hasDailyAIRecommendation;
  String get aiRecommendationType => _aiRecommendationType;
  String get aiRecommendationEmoji => _aiRecommendationEmoji;
  
  String get daysSinceLastWorkoutText {
    if (_daysSinceLastWorkout == null) return 'Sem dados';
    if (_daysSinceLastWorkout == 0) return 'Treinou hoje!';
    if (_daysSinceLastWorkout == 1) return '1 dia desde √∫ltimo treino';
    return '$_daysSinceLastWorkout dias desde √∫ltimo treino';
  }
  
    // NOVOS GETTERS - Recomenda√ß√£o inteligente
  Map<String, dynamic> get smartRecommendation => _smartRecommendation;
  Map<String, dynamic> get analysisData => _analysisData;
  String get recommendationReason => _recommendationReason;
  double get confidenceScore => _confidenceScore;
  List<String> get personalizationFactors => _personalizationFactors;
  bool get hasSmartRecommendation => _hasSmartRecommendation;
  // ============================================================
  // M√âTODOS PRINCIPAIS
  // ============================================================
  
  /// Carrega todos os dados do dashboard
  Future<void> loadDashboard() async {
    if (_isLoading) return;
    
    _isLoading = true;
    _error = null;
    notifyListeners();
    
    try {
      debugPrint('üìä Carregando dados do dashboard...');
      
      // 1. Carregar hist√≥rico de treinos
      await _loadWorkoutHistory();
      
      // 2. Calcular estat√≠sticas localmente
      _calculateStatistics();
      
      // 3. üî• NOVO: Buscar √∫ltimo treino gerado pela IA PRIMEIRO
      await _loadLastAIGeneratedWorkout();
      
      // 4. Se n√£o houver treino da IA, buscar recomendado normal
      if (_recommendedWorkout == null) {
        await _loadRecommendedWorkoutWithAI();
      }
      
      // 3. üî• Carregar recomenda√ß√£o di√°ria da IA (NOVO)
      await loadDailyAIRecommendation();
      
      _error = null;
      
      debugPrint('‚úÖ Dashboard carregado com sucesso:');
      debugPrint('   Total de treinos: $_totalWorkouts');
      debugPrint('   Dias ativos: $_activeDays');
      debugPrint('   Meta semanal: $_weeklyGoalPercentage%');
      debugPrint('   Treino gerado pela IA: ${_isAIGeneratedWorkout ? "SIM" : "N√ÉO"}');
      debugPrint('   Recomenda√ß√£o IA: ${_isAIRecommendation ? "SIM" : "N√ÉO"}');
      
    } catch (e) {
      debugPrint('‚ùå Erro ao carregar dashboard: $e');
      _error = 'Erro ao carregar dados: $e';
      _setDefaultValues();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // ============================================================
  // üî• NOVO: BUSCAR √öLTIMO TREINO GERADO PELA IA
  // ============================================================
  
  /// Busca o √∫ltimo treino criado pela IA para o usu√°rio
  Future<void> _loadLastAIGeneratedWorkout() async {
    try {
      debugPrint('ü§ñ Buscando √∫ltimo treino gerado pela IA...');
      
      // Buscar todos os treinos do usu√°rio
      final response = await ApiService.getWorkouts();
      
      if (response['workouts'] == null || (response['workouts'] as List).isEmpty) {
        debugPrint('‚ÑπÔ∏è Nenhum treino encontrado');
        return;
      }
      
      final allWorkouts = response['workouts'] as List;
      
      // üî• FILTRAR: Apenas treinos criados pela IA
      final aiWorkouts = allWorkouts.where((workout) {
        // ‚úÖ Op√ß√£o 1 (PRINCIPAL): Campo is_recommended do seu backend
        if (workout['is_recommended'] == true) {
          debugPrint('   ‚úì Treino ${workout['name']} marcado com is_recommended');
          return true;
        }
        
        // ‚úÖ Op√ß√£o 2: Campo is_personalized (treinos personalizados do usu√°rio)
        if (workout['is_personalized'] == true) {
          debugPrint('   ‚úì Treino ${workout['name']} marcado com is_personalized');
          return true;
        }
        
        // ‚úÖ Op√ß√£o 3: Tem created_by_user (foi criado por um usu√°rio espec√≠fico)
        if (workout['created_by_user'] != null) {
          debugPrint('   ‚úì Treino ${workout['name']} criado por usu√°rio');
          return true;
        }
        
        // ‚úÖ Op√ß√£o 4: Descri√ß√£o cont√©m indicadores de IA
        final description = (workout['description'] ?? '').toString().toLowerCase();
        if (description.contains('gerado pela ia') ||
            description.contains('gerado pela intelig√™ncia artificial') ||
            description.contains('criado pela ia') ||
            description.contains('personalizado pela ia') ||
            description.contains('fitai')) {
          debugPrint('   ‚úì Treino ${workout['name']} com descri√ß√£o de IA');
          return true;
        }
        
        return false;
      }).toList();
      
      if (aiWorkouts.isEmpty) {
        debugPrint('‚ÑπÔ∏è Nenhum treino gerado pela IA encontrado');
        return;
      }
      
      // Ordenar por data de cria√ß√£o (mais recente primeiro)
      aiWorkouts.sort((a, b) {
        try {
          final dateA = DateTime.parse(a['created_at'] ?? '');
          final dateB = DateTime.parse(b['created_at'] ?? '');
          return dateB.compareTo(dateA);
        } catch (e) {
          return 0;
        }
      });
      
      // Pegar o mais recente
      final lastAIWorkout = aiWorkouts.first;
      
      // Buscar detalhes completos do treino
      final workoutId = lastAIWorkout['id'];
      final workoutDetails = await ApiService.getWorkoutDetail(workoutId);
      
      _recommendedWorkout = workoutDetails;
      _isAIGeneratedWorkout = true;
      _isAIRecommendation = true;
      _aiRecommendationReason = '√öltimo treino gerado pela IA para voc√™';
      
      debugPrint('‚úÖ √öltimo treino da IA encontrado: ${_recommendedWorkout!['name']}');
      debugPrint('   ID: $workoutId');
      debugPrint('   Criado em: ${lastAIWorkout['created_at']}');
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao buscar treino da IA: $e');
      // N√£o definir _recommendedWorkout = null aqui, deixa tentar o fallback
    }
  }
  
  // ============================================================
  // CARREGAR HIST√ìRICO DE TREINOS
  // ============================================================
  
  Future<void> _loadWorkoutHistory() async {
    try {
      debugPrint('üì• Buscando hist√≥rico de treinos...');
      
      final response = await ApiService.get('/sessions/history/');
      
      debugPrint('üì¶ Resposta do hist√≥rico: $response');

      List<dynamic>? sessionsList;
      
      if (response is List) {
        sessionsList = response;
      } else if (response is Map) {
        sessionsList = response['results'] ?? 
                      response['sessions'] ?? 
                      response['data'] ??
                      response['history'];
      }

      if (sessionsList == null) {
        debugPrint('‚ö†Ô∏è Formato de resposta inesperado');
        _workoutHistory = [];
        return;
      }

      _workoutHistory = sessionsList
          .map((json) {
            try {
              return WorkoutHistoryModel.fromJson(json);
            } catch (e) {
              debugPrint('‚ö†Ô∏è Erro ao parsear workout: $e');
              return null;
            }
          })
          .whereType<WorkoutHistoryModel>()
          .toList();

      // Ordenar do mais recente para o mais antigo
      _workoutHistory.sort((a, b) => b.date.compareTo(a.date));
      
      debugPrint('‚úÖ ${_workoutHistory.length} treinos carregados para dashboard');
      
    } catch (e) {
      debugPrint('‚ùå Erro ao buscar hist√≥rico: $e');
      _workoutHistory = [];
    }
  }
  
  // ============================================================
  // CALCULAR ESTAT√çSTICAS LOCALMENTE
  // ============================================================
  
  void _calculateStatistics() {
    debugPrint('üßÆ Calculando estat√≠sticas...');
    
    if (_workoutHistory.isEmpty) {
      _totalWorkouts = 0;
      _activeDays = 0;
      _weeklyGoalPercentage = 0.0;
      return;
    }

    // Total de treinos
    _totalWorkouts = _workoutHistory.length;
    
    // Contar dias √∫nicos com treinos
    final uniqueDays = <String>{};
    for (var workout in _workoutHistory) {
      uniqueDays.add('${workout.date.year}-${workout.date.month}-${workout.date.day}');
    }
    _activeDays = uniqueDays.length;

    // Meta semanal (√∫ltimos 7 dias)
    final now = DateTime.now();
    final sevenDaysAgo = now.subtract(const Duration(days: 7));
    
    final workoutsThisWeek = _workoutHistory.where((workout) {
      return workout.date.isAfter(sevenDaysAgo) && workout.date.isBefore(now);
    }).length;
    
    // Meta de 5 treinos por semana
    const weeklyGoal = 5;
    _weeklyGoalPercentage = ((workoutsThisWeek / weeklyGoal) * 100).clamp(0, 100);
    
    debugPrint('üìà Estat√≠sticas calculadas:');
    debugPrint('   Total: $_totalWorkouts');
    debugPrint('   Dias ativos: $_activeDays');
    debugPrint('   Esta semana: $workoutsThisWeek');
    debugPrint('   Meta: $_weeklyGoalPercentage%');
  }
  
  // ============================================================
  // ü§ñ BUSCAR TREINO RECOMENDADO COM IA (FALLBACK)
  // ============================================================
  
  /// Tenta buscar recomenda√ß√£o da IA, com fallback para endpoint normal
  Future<void> _loadRecommendedWorkoutWithAI() async {
    try {
      debugPrint('ü§ñ Tentando buscar recomenda√ß√£o da IA (fallback)...');
      
      // üî• PRIMEIRO: Tentar recomenda√ß√µes de exerc√≠cios da IA
      try {
        final aiResponse = await ApiService.getAIExerciseRecommendations();
        
        if (aiResponse['recommendations'] != null && 
            (aiResponse['recommendations'] as List).isNotEmpty) {
          
          final firstRecommendation = (aiResponse['recommendations'] as List).first;
          
          // Verificar se tem workout_id
          if (firstRecommendation['workout_id'] != null) {
            // Buscar detalhes completos do treino
            final workoutId = firstRecommendation['workout_id'];
            final workoutDetails = await ApiService.getWorkoutDetail(workoutId);
            
            _recommendedWorkout = workoutDetails;
            _isAIGeneratedWorkout = false; // √â recomendado, n√£o gerado
            _isAIRecommendation = true;
            _aiRecommendationReason = firstRecommendation['reason'] ?? 
                                      'Recomendado com base no seu perfil';
            
            debugPrint('‚úÖ Treino recomendado pela IA: ${_recommendedWorkout!['name']}');
            debugPrint('   Motivo: $_aiRecommendationReason');
            
            return;
          }
        }
      } catch (aiError) {
        debugPrint('‚ö†Ô∏è IA n√£o dispon√≠vel ou sem recomenda√ß√µes: $aiError');
      }
      
      // üî• SEGUNDO: Fallback para endpoint de treinos recomendados normal
      debugPrint('üí™ Buscando treino recomendado do backend...');
      
      final response = await ApiService.getRecommendedWorkouts();
      
      if (response['workouts'] != null && (response['workouts'] as List).isNotEmpty) {
        _recommendedWorkout = (response['workouts'] as List).first;
        _isAIGeneratedWorkout = false;
        _isAIRecommendation = false;
        _aiRecommendationReason = null;
        debugPrint('‚úÖ Treino recomendado (backend): ${_recommendedWorkout!['name']}');
        return;
      }
      
      // üî• TERCEIRO: Buscar treino diferente do √∫ltimo
      if (_workoutHistory.isNotEmpty) {
        final lastWorkout = _workoutHistory.first;
        
        final workoutsResponse = await ApiService.getWorkouts();
        
        if (workoutsResponse['workouts'] != null) {
          final allWorkouts = workoutsResponse['workouts'] as List;
          
          // Filtrar treinos diferentes do √∫ltimo
          final differentWorkouts = allWorkouts.where((w) {
            final muscleGroups = w['target_muscle_groups'] ?? '';
            return !lastWorkout.muscleGroups.any((m) => 
              muscleGroups.toString().toLowerCase().contains(m.toLowerCase())
            );
          }).toList();
          
          if (differentWorkouts.isNotEmpty) {
            _recommendedWorkout = differentWorkouts.first;
            _isAIGeneratedWorkout = false;
            _isAIRecommendation = false;
            _aiRecommendationReason = null;
            debugPrint('‚úÖ Treino diferente recomendado: ${_recommendedWorkout!['name']}');
            return;
          }
          
          // Se n√£o encontrar diferente, pega qualquer um
          if (allWorkouts.isNotEmpty) {
            _recommendedWorkout = allWorkouts.first;
            _isAIGeneratedWorkout = false;
            _isAIRecommendation = false;
            _aiRecommendationReason = null;
            debugPrint('‚úÖ Treino padr√£o recomendado: ${_recommendedWorkout!['name']}');
            return;
          }
        }
      }
      
      debugPrint('‚ÑπÔ∏è Nenhum treino recomendado dispon√≠vel');
      _recommendedWorkout = null;
      _isAIGeneratedWorkout = false;
      _isAIRecommendation = false;
      _aiRecommendationReason = null;
      
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao buscar treino recomendado: $e');
      _recommendedWorkout = null;
      _isAIGeneratedWorkout = false;
      _isAIRecommendation = false;
      _aiRecommendationReason = null;
    }
  }
  
  // ============================================================
  // ü§ñ GERAR RECOMENDA√á√ÉO MOTIVACIONAL COM IA
  // ============================================================
  
  /// üî• NOVO: Carregar recomenda√ß√£o di√°ria da IA
Future<void> loadDailyAIRecommendation() async {
  try {
    debugPrint('ü§ñ Carregando recomenda√ß√£o di√°ria da IA...');
    
    // Calcular dias desde √∫ltimo treino
    if (_workoutHistory.isNotEmpty) {
      final lastWorkout = _workoutHistory.first;
      final now = DateTime.now();
      _daysSinceLastWorkout = now.difference(lastWorkout.date).inDays;
    } else {
      _daysSinceLastWorkout = 999;
    }
    
    final response = await ApiService.getDailyAIRecommendation();
    
    if (response['success'] == true && response['recommendation'] != null) {
      _dailyAIRecommendation = response['recommendation'];
      _hasDailyAIRecommendation = true;
      
      // Extrair informa√ß√µes
      _aiRecommendationType = _dailyAIRecommendation!['recommendation_type'] ?? 'motivation';
      _aiRecommendationEmoji = _dailyAIRecommendation!['emoji'] ?? 'üí™';
      
      // ‚úÖ Atualizar mensagem motivacional com a da IA
      _aiMotivationalMessage = _dailyAIRecommendation!['message'];
      
      debugPrint('‚úÖ Recomenda√ß√£o IA carregada:');
      debugPrint('   Tipo: $_aiRecommendationType');
      debugPrint('   T√≠tulo: ${_dailyAIRecommendation!['title']}');
      debugPrint('   Mensagem: $_aiMotivationalMessage');
      debugPrint('   Cached: ${response['cached'] ?? false}');
      
    } else if (response['recommendation'] != null) {
      // Fallback do backend
      _dailyAIRecommendation = response['recommendation'];
      _hasDailyAIRecommendation = true;
      _aiRecommendationType = _dailyAIRecommendation!['recommendation_type'] ?? 'motivation';
      _aiRecommendationEmoji = _dailyAIRecommendation!['emoji'] ?? 'üí™';
      _aiMotivationalMessage = _dailyAIRecommendation!['message'];
      
      debugPrint('‚úÖ Usando recomenda√ß√£o do backend (fallback)');
    } else {
      debugPrint('‚ÑπÔ∏è Nenhuma recomenda√ß√£o dispon√≠vel');
      _hasDailyAIRecommendation = false;
      _generateLocalMotivationalMessage();
    }
    
    notifyListeners();
    
  } catch (e) {
    debugPrint('‚ùå Erro ao carregar recomenda√ß√£o di√°ria: $e');
    _hasDailyAIRecommendation = false;
    _generateLocalMotivationalMessage();
    notifyListeners();
  }
}

/// Gera mensagem motivacional local (fallback)
void _generateLocalMotivationalMessage() {
  if (_workoutHistory.isEmpty) {
    _aiMotivationalMessage = 'üöÄ Comece sua jornada fitness hoje!';
    _daysSinceLastWorkout = 0;
    return;
  }

  if (_daysSinceLastWorkout == 0) {
    _aiMotivationalMessage = 'üî• √ìtimo! Voc√™ j√° treinou hoje!';
  } else if (_daysSinceLastWorkout == 1) {
    _aiMotivationalMessage = 'üí™ Continue consistente!';
  } else if (_daysSinceLastWorkout! <= 3) {
    _aiMotivationalMessage = '‚è∞ Hora de voltar aos treinos!';
  } else if (_daysSinceLastWorkout! <= 7) {
    _aiMotivationalMessage = 'üëã Sentimos sua falta!';
  } else {
    _aiMotivationalMessage = 'üåü Vamos recome√ßar?';
  }
}

/// üîÑ Refresh da recomenda√ß√£o di√°ria
Future<void> refreshDailyAIRecommendation() async {
  try {
    debugPrint('üîÑ For√ßando refresh da recomenda√ß√£o...');
    
    _isLoading = true;
    notifyListeners();
    
    final response = await ApiService.refreshDailyAIRecommendation();
    
    if (response['success'] == true && response['recommendation'] != null) {
      _dailyAIRecommendation = response['recommendation'];
      _hasDailyAIRecommendation = true;
      _aiRecommendationType = _dailyAIRecommendation!['recommendation_type'] ?? 'motivation';
      _aiRecommendationEmoji = _dailyAIRecommendation!['emoji'] ?? 'üí™';
      _aiMotivationalMessage = _dailyAIRecommendation!['message'];
      
      debugPrint('‚úÖ Recomenda√ß√£o atualizada com sucesso');
    }
    
    _isLoading = false;
    notifyListeners();
    
  } catch (e) {
    debugPrint('‚ùå Erro no refresh: $e');
    _isLoading = false;
    notifyListeners();
  }
}

// ============================================
// MANTER loadSmartRecommendation SE VOC√ä USA
// (para o card de treino recomendado)
// ============================================

/// Carrega recomenda√ß√£o inteligente baseada em an√°lise
Future<void> loadSmartRecommendation() async {
  try {
    debugPrint('üß† Carregando recomenda√ß√£o inteligente...');

    final response = await ApiService.getSmartRecommendation();

    if (response['success'] == true) {
      _smartRecommendation = response['workout'] ?? {};
      _analysisData = response['analysis'] ?? {};
      
      final analysis = response['analysis'] ?? {};
      _recommendationReason = analysis['recommendation_reason'] ?? 'Recomenda√ß√£o personalizada';
      _confidenceScore = (analysis['confidence_score'] ?? 0.0).toDouble();
      _personalizationFactors = List<String>.from(
        analysis['personalization_factors'] ?? []
      );

      _hasSmartRecommendation = _smartRecommendation.isNotEmpty;

      debugPrint('‚úÖ Recomenda√ß√£o inteligente carregada');
      debugPrint('   Raz√£o: $_recommendationReason');
      debugPrint('   Confian√ßa: ${(_confidenceScore * 100).toStringAsFixed(0)}%');

    } else {
      debugPrint('‚ÑπÔ∏è Sem recomenda√ß√£o inteligente dispon√≠vel');
      _hasSmartRecommendation = false;
      _smartRecommendation = {};
      _analysisData = {};
    }

    notifyListeners();

  } catch (e) {
    debugPrint('‚ùå Erro ao carregar recomenda√ß√£o inteligente: $e');
    _hasSmartRecommendation = false;
    notifyListeners();
  }
}

/// Formata a raz√£o da recomenda√ß√£o para exibi√ß√£o
String getFormattedReason() {
  if (_recommendationReason.isEmpty) {
    return 'Treino personalizado para voc√™';
  }
  return _recommendationReason;
}

/// Retorna emoji baseado no tipo de recomenda√ß√£o
String getRecommendationEmoji() {
  if (_analysisData.isEmpty) return 'üí™';
  
  final type = _analysisData['recommendation_type'] ?? 'strength';
  
  final emojiMap = {
    'strength': 'üèãÔ∏è',
    'cardio': 'üèÉ',
    'recovery': 'üßò',
    'beginner': 'üë∂',
    'advanced': 'üöÄ',
    'rest': 'üò¥',
    'hiit': '‚ö°',
    'flexibility': 'ü§∏',
  };
  
  return emojiMap[type] ?? 'üí™';
}

/// Retorna cor baseada na confian√ßa
Color getConfidenceColor() {
  if (_confidenceScore >= 0.85) return const Color(0xFF4CAF50);
  if (_confidenceScore >= 0.7) return const Color(0xFF00BCD4);
  return const Color(0xFFFFC107);
}

/// Retorna texto de confian√ßa
String getConfidenceText() {
  if (_confidenceScore >= 0.85) return 'Muito confiante';
  if (_confidenceScore >= 0.7) return 'Confiante';
  return 'Sugest√£o';
}

// ============================================
// HELPERS
// ============================================

void _setDefaultValues() {
  _totalWorkouts = 0;
  _activeDays = 0;
  _weeklyGoalPercentage = 0.0;
  _recommendedWorkout = null;
  _isAIGeneratedWorkout = false;
  _isAIRecommendation = false;
  _aiRecommendationReason = null;
  _aiMotivationalMessage = 'N√£o foi poss√≠vel carregar recomenda√ß√µes';
  _daysSinceLastWorkout = null;
  _workoutHistory = [];
  
  // Limpar recomenda√ß√£o di√°ria
  _dailyAIRecommendation = null;
  _hasDailyAIRecommendation = false;
  _aiRecommendationType = 'motivation';
  _aiRecommendationEmoji = 'üí™';
}

// ============================================
// ADICIONE ESTES M√âTODOS DEPOIS DOS HELPERS
// (logo ap√≥s _setDefaultValues())
// ============================================

/// M√©todo auxiliar para cor baseada no tipo de recomenda√ß√£o di√°ria
Color getAIRecommendationColor() {
  switch (_aiRecommendationType) {
    case 'workout':
      return const Color(0xFF4CAF50); // Verde
    case 'rest':
      return const Color(0xFFFF9800); // Laranja
    case 'active_recovery':
      return const Color(0xFF00BCD4); // Cyan
    case 'motivation':
      return const Color(0xFFE91E63); // Rosa
    default:
      return const Color(0xFF00BCD4);
  }
}

/// M√©todo auxiliar para √≠cone baseado no tipo de recomenda√ß√£o di√°ria
IconData getAIRecommendationIcon() {
  switch (_aiRecommendationType) {
    case 'workout':
      return Icons.fitness_center;
    case 'rest':
      return Icons.bed;
    case 'active_recovery':
      return Icons.self_improvement;
    case 'motivation':
      return Icons.emoji_events;
    default:
      return Icons.lightbulb_outline;
  }
}

/// Getter para t√≠tulo da recomenda√ß√£o di√°ria
String get aiRecommendationTitle {
  if (_dailyAIRecommendation != null && _dailyAIRecommendation!['title'] != null) {
    return _dailyAIRecommendation!['title'];
  }
  return 'Recomenda√ß√£o do Dia';
}

/// Limpar dados
void clear() {
  _setDefaultValues();
  _error = null;
  notifyListeners();
}

/// Refresh estat√≠sticas
Future<void> refreshStatistics() async {
  try {
    await _loadWorkoutHistory();
    _calculateStatistics();
    _generateLocalMotivationalMessage();
    notifyListeners();
  } catch (e) {
    debugPrint('‚ùå Erro ao atualizar: $e');
  }
}

/// Refresh treino recomendado
Future<void> refreshRecommendedWorkout() async {
  try {
    await _loadLastAIGeneratedWorkout();
    if (_recommendedWorkout == null) {
      await _loadRecommendedWorkoutWithAI();
    }
    notifyListeners();
  } catch (e) {
    debugPrint('‚ùå Erro: $e');
  }
}
  

  
  // ============================================================
  // M√âTODOS AUXILIARES PARA UI
  // ============================================================
  
  String getRecommendedWorkoutName() {
    return _recommendedWorkout?['name'] ?? 'Nenhum treino dispon√≠vel';
  }
  
  int? getRecommendedWorkoutId() {
    return _recommendedWorkout?['id'];
  }
  
  String getRecommendedWorkoutDescription() {
    return _recommendedWorkout?['description'] ?? 'Sem descri√ß√£o';
  }
  
  int getRecommendedWorkoutDuration() {
    return _recommendedWorkout?['estimated_duration'] ?? 0;
  }
  
  String getRecommendedWorkoutDifficulty() {
    final difficulty = _recommendedWorkout?['difficulty_level'] ?? 'beginner';
    
    switch (difficulty.toString().toLowerCase()) {
      case 'beginner':
        return 'Iniciante';
      case 'intermediate':
        return 'Intermedi√°rio';
      case 'advanced':
        return 'Avan√ßado';
      default:
        return 'Iniciante';
    }
  }
  
  String getRecommendationBadge() {
    if (_isAIGeneratedWorkout) {
      return 'ü§ñ Gerado pela IA';
    } else if (_isAIRecommendation) {
      return 'ü§ñ Recomendado pela IA';
    }
    return '';
  }
}

